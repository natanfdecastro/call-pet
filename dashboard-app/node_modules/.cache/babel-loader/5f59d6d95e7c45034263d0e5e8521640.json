{"ast":null,"code":"import { isQueryPresent, getQueryMembers, flattenFilters, moveItemInArray, movePivotItem, ResultSet, defaultOrder, defaultHeuristics, areQueriesEqual } from '@cubejs-client/core';\nexport { isQueryPresent } from '@cubejs-client/core';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport React, { createContext, useRef, useState, useContext, useEffect } from 'react';\nimport { equals, toPairs, fromPairs, uniqBy, prop, pick, clone } from 'ramda';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nvar CubeContext = /*#__PURE__*/createContext(null);\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$2(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper$1(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar QueryRenderer = /*#__PURE__*/function (_React$Component) {\n  _inherits(QueryRenderer, _React$Component);\n\n  var _super = _createSuper$1(QueryRenderer);\n\n  function QueryRenderer(props) {\n    var _this;\n\n    _classCallCheck(this, QueryRenderer);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    _this.mutexObj = {};\n    return _this;\n  }\n\n  _createClass(QueryRenderer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          query = _this$props.query,\n          queries = _this$props.queries;\n\n      if (query) {\n        this.load(query);\n      }\n\n      if (queries) {\n        this.loadQueries(queries);\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$props2 = this.props,\n          query = _this$props2.query,\n          queries = _this$props2.queries,\n          render = _this$props2.render,\n          cubejsApi = _this$props2.cubejsApi,\n          loadSql = _this$props2.loadSql,\n          updateOnlyOnStateChange = _this$props2.updateOnlyOnStateChange;\n\n      if (!updateOnlyOnStateChange) {\n        return true;\n      }\n\n      return !equals(nextProps.query, query) || !equals(nextProps.queries, queries) || (nextProps.render == null || render == null) && nextProps.render !== render || nextProps.cubejsApi !== cubejsApi || nextProps.loadSql !== loadSql || !equals(nextState, this.state) || nextProps.updateOnlyOnStateChange !== updateOnlyOnStateChange;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          query = _this$props3.query,\n          queries = _this$props3.queries;\n\n      if (!equals(prevProps.query, query)) {\n        this.load(query);\n      }\n\n      if (!equals(prevProps.queries, queries)) {\n        this.loadQueries(queries);\n      }\n    }\n  }, {\n    key: \"cubejsApi\",\n    value: function cubejsApi() {\n      // eslint-disable-next-line react/destructuring-assignment\n      return this.props.cubejsApi || this.context && this.context.cubejsApi;\n    }\n  }, {\n    key: \"load\",\n    value: function load(query) {\n      var _this2 = this;\n\n      var resetResultSetOnChange = this.props.resetResultSetOnChange;\n      this.setState(_objectSpread$2({\n        isLoading: true,\n        error: null,\n        sqlQuery: null\n      }, resetResultSetOnChange ? {\n        resultSet: null\n      } : {}));\n      var loadSql = this.props.loadSql;\n      var cubejsApi = this.cubejsApi();\n\n      if (query && QueryRenderer.isQueryPresent(query)) {\n        if (loadSql === 'only') {\n          cubejsApi.sql(query, {\n            mutexObj: this.mutexObj,\n            mutexKey: 'sql'\n          }).then(function (sqlQuery) {\n            return _this2.setState({\n              sqlQuery: sqlQuery,\n              error: null,\n              isLoading: false\n            });\n          })[\"catch\"](function (error) {\n            return _this2.setState(_objectSpread$2(_objectSpread$2({}, resetResultSetOnChange ? {\n              resultSet: null\n            } : {}), {}, {\n              error: error,\n              isLoading: false\n            }));\n          });\n        } else if (loadSql) {\n          Promise.all([cubejsApi.sql(query, {\n            mutexObj: this.mutexObj,\n            mutexKey: 'sql'\n          }), cubejsApi.load(query, {\n            mutexObj: this.mutexObj,\n            mutexKey: 'query'\n          })]).then(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                sqlQuery = _ref2[0],\n                resultSet = _ref2[1];\n\n            return _this2.setState({\n              sqlQuery: sqlQuery,\n              resultSet: resultSet,\n              error: null,\n              isLoading: false\n            });\n          })[\"catch\"](function (error) {\n            return _this2.setState(_objectSpread$2(_objectSpread$2({}, resetResultSetOnChange ? {\n              resultSet: null\n            } : {}), {}, {\n              error: error,\n              isLoading: false\n            }));\n          });\n        } else {\n          cubejsApi.load(query, {\n            mutexObj: this.mutexObj,\n            mutexKey: 'query'\n          }).then(function (resultSet) {\n            return _this2.setState({\n              resultSet: resultSet,\n              error: null,\n              isLoading: false\n            });\n          })[\"catch\"](function (error) {\n            return _this2.setState(_objectSpread$2(_objectSpread$2({}, resetResultSetOnChange ? {\n              resultSet: null\n            } : {}), {}, {\n              error: error,\n              isLoading: false\n            }));\n          });\n        }\n      }\n    }\n  }, {\n    key: \"loadQueries\",\n    value: function loadQueries(queries) {\n      var _this3 = this;\n\n      var cubejsApi = this.cubejsApi();\n      var resetResultSetOnChange = this.props.resetResultSetOnChange;\n      this.setState(_objectSpread$2(_objectSpread$2({\n        isLoading: true\n      }, resetResultSetOnChange ? {\n        resultSet: null\n      } : {}), {}, {\n        error: null\n      }));\n      var resultPromises = Promise.all(toPairs(queries).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            name = _ref4[0],\n            query = _ref4[1];\n\n        return cubejsApi.load(query, {\n          mutexObj: _this3.mutexObj,\n          mutexKey: name\n        }).then(function (r) {\n          return [name, r];\n        });\n      }));\n      resultPromises.then(function (resultSet) {\n        return _this3.setState({\n          resultSet: fromPairs(resultSet),\n          error: null,\n          isLoading: false\n        });\n      })[\"catch\"](function (error) {\n        return _this3.setState(_objectSpread$2(_objectSpread$2({}, resetResultSetOnChange ? {\n          resultSet: null\n        } : {}), {}, {\n          error: error,\n          isLoading: false\n        }));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          error = _this$state.error,\n          queries = _this$state.queries,\n          resultSet = _this$state.resultSet,\n          isLoading = _this$state.isLoading,\n          sqlQuery = _this$state.sqlQuery;\n      var render = this.props.render;\n      var loadState = {\n        error: error,\n        resultSet: queries ? resultSet || {} : resultSet,\n        loadingState: {\n          isLoading: isLoading\n        },\n        sqlQuery: sqlQuery\n      };\n\n      if (render) {\n        return render(loadState);\n      }\n\n      return null;\n    }\n  }], [{\n    key: \"isQueryPresent\",\n    value: function isQueryPresent$1(query) {\n      return isQueryPresent(query);\n    }\n  }]);\n\n  return QueryRenderer;\n}(React.Component);\n\nQueryRenderer.contextType = CubeContext;\nQueryRenderer.defaultProps = {\n  cubejsApi: null,\n  query: null,\n  render: null,\n  queries: null,\n  loadSql: null,\n  updateOnlyOnStateChange: false,\n  resetResultSetOnChange: true\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar QueryRendererWithTotals = function QueryRendererWithTotals(_ref) {\n  var query = _ref.query,\n      restProps = _objectWithoutProperties(_ref, [\"query\"]);\n\n  return /*#__PURE__*/React.createElement(QueryRenderer, _extends({\n    queries: {\n      totals: _objectSpread$1(_objectSpread$1({}, query), {}, {\n        dimensions: [],\n        timeDimensions: query.timeDimensions ? query.timeDimensions.map(function (td) {\n          return _objectSpread$1(_objectSpread$1({}, td), {}, {\n            granularity: null\n          });\n        }) : undefined\n      }),\n      main: query\n    }\n  }, restProps));\n};\n\nQueryRendererWithTotals.defaultProps = {\n  query: null,\n  render: null,\n  queries: null,\n  loadSql: null\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar granularities = [{\n  name: undefined,\n  title: 'w/o grouping'\n}, {\n  name: 'second',\n  title: 'Second'\n}, {\n  name: 'minute',\n  title: 'Minute'\n}, {\n  name: 'hour',\n  title: 'Hour'\n}, {\n  name: 'day',\n  title: 'Day'\n}, {\n  name: 'week',\n  title: 'Week'\n}, {\n  name: 'month',\n  title: 'Month'\n}, {\n  name: 'year',\n  title: 'Year'\n}];\n\nvar QueryBuilder = /*#__PURE__*/function (_React$Component) {\n  _inherits(QueryBuilder, _React$Component);\n\n  var _super = _createSuper(QueryBuilder);\n\n  function QueryBuilder(props) {\n    var _this;\n\n    _classCallCheck(this, QueryBuilder);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchMeta\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var meta, metaError;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              metaError = null;\n              _context.prev = 1;\n\n              _this.setState({\n                isFetchingMeta: true\n              });\n\n              _context.next = 5;\n              return _this.cubejsApi().meta();\n\n            case 5:\n              meta = _context.sent;\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              metaError = _context.t0;\n\n            case 11:\n              _this.setState({\n                meta: meta,\n                metaError: metaError,\n                isFetchingMeta: false\n              }, function () {\n                // Run update query to force viz state update\n                // This will catch any new missing members, and also validate the query against the new meta\n                _this.updateQuery({});\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    })));\n\n    _this.state = _objectSpread(_objectSpread({\n      query: props.defaultQuery || props.query,\n      chartType: props.defaultChartType,\n      validatedQuery: props.query,\n      // deprecated, validatedQuery should not be set until after dry-run for safety\n      missingMembers: [],\n      isFetchingMeta: false,\n      dryRunResponse: null\n    }, props.vizState), props.initialVizState);\n    _this.mutexObj = {};\n    return _this;\n  }\n\n  _createClass(QueryBuilder, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.fetchMeta();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(prevProps) {\n        var _this2 = this;\n\n        var _this$props, schemaVersion, onSchemaChange, meta, newMeta;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this$props = this.props, schemaVersion = _this$props.schemaVersion, onSchemaChange = _this$props.onSchemaChange;\n                meta = this.state.meta;\n\n                if (!(prevProps.schemaVersion !== schemaVersion)) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                _context4.prev = 3;\n                _context4.next = 6;\n                return this.cubejsApi().meta();\n\n              case 6:\n                newMeta = _context4.sent;\n\n                if (!equals(newMeta, meta) && typeof onSchemaChange === 'function') {\n                  onSchemaChange({\n                    schemaVersion: schemaVersion,\n                    refresh: function () {\n                      var _refresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                          while (1) {\n                            switch (_context3.prev = _context3.next) {\n                              case 0:\n                                _context3.next = 2;\n                                return _this2.fetchMeta();\n\n                              case 2:\n                              case \"end\":\n                                return _context3.stop();\n                            }\n                          }\n                        }, _callee3);\n                      }));\n\n                      function refresh() {\n                        return _refresh.apply(this, arguments);\n                      }\n\n                      return refresh;\n                    }()\n                  });\n                }\n\n                _context4.next = 13;\n                break;\n\n              case 10:\n                _context4.prev = 10;\n                _context4.t0 = _context4[\"catch\"](3); // eslint-disable-next-line\n\n                this.setState({\n                  metaError: _context4.t0\n                });\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 10]]);\n      }));\n\n      function componentDidUpdate(_x) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"cubejsApi\",\n    value: function cubejsApi() {\n      var cubejsApi = this.props.cubejsApi; // eslint-disable-next-line react/destructuring-assignment\n\n      return cubejsApi || this.context && this.context.cubejsApi;\n    }\n  }, {\n    key: \"getMissingMembers\",\n    value: function getMissingMembers(query, meta) {\n      if (!meta) {\n        return [];\n      }\n\n      return getQueryMembers(query).map(function (member) {\n        var resolvedMember = meta.resolveMember(member, ['measures', 'dimensions', 'segments']);\n\n        if (resolvedMember.error) {\n          return member;\n        }\n\n        return false;\n      }).filter(Boolean);\n    }\n  }, {\n    key: \"isQueryPresent\",\n    value: function isQueryPresent() {\n      var query = this.state.query;\n      return QueryRenderer.isQueryPresent(query);\n    }\n  }, {\n    key: \"prepareRenderProps\",\n    value: function prepareRenderProps(queryRendererProps) {\n      var _this3 = this;\n\n      var getName = function getName(member) {\n        return member.name;\n      };\n\n      var toTimeDimension = function toTimeDimension(member) {\n        var rangeSelection = member.compareDateRange ? {\n          compareDateRange: member.compareDateRange\n        } : {\n          dateRange: member.dateRange\n        };\n        return _objectSpread({\n          dimension: member.dimension.name,\n          granularity: member.granularity\n        }, rangeSelection);\n      };\n\n      var toFilter = function toFilter(member) {\n        var _member$member, _member$dimension;\n\n        return {\n          member: ((_member$member = member.member) === null || _member$member === void 0 ? void 0 : _member$member.name) || ((_member$dimension = member.dimension) === null || _member$dimension === void 0 ? void 0 : _member$dimension.name),\n          operator: member.operator,\n          values: member.values\n        };\n      };\n\n      var updateMethods = function updateMethods(memberType) {\n        var toQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getName;\n        return {\n          add: function add(member) {\n            var query = _this3.state.query;\n\n            _this3.updateQuery(_defineProperty({}, memberType, (query[memberType] || []).concat(toQuery(member))));\n          },\n          remove: function remove(member) {\n            var query = _this3.state.query;\n            var members = (query[memberType] || []).concat([]);\n            members.splice(member.index, 1);\n            return _this3.updateQuery(_defineProperty({}, memberType, members));\n          },\n          update: function update(member, updateWith) {\n            var query = _this3.state.query;\n            var members = (query[memberType] || []).concat([]);\n            members.splice(member.index, 1, toQuery(updateWith));\n            return _this3.updateQuery(_defineProperty({}, memberType, members));\n          }\n        };\n      };\n\n      var _this$state = this.state,\n          meta = _this$state.meta,\n          metaError = _this$state.metaError,\n          query = _this$state.query,\n          queryError = _this$state.queryError,\n          chartType = _this$state.chartType,\n          pivotConfig = _this$state.pivotConfig,\n          validatedQuery = _this$state.validatedQuery,\n          missingMembers = _this$state.missingMembers,\n          isFetchingMeta = _this$state.isFetchingMeta,\n          dryRunResponse = _this$state.dryRunResponse;\n      var flatFilters = uniqBy(prop('member'), flattenFilters(meta && query.filters || []).map(function (filter) {\n        return _objectSpread(_objectSpread({}, filter), {}, {\n          member: filter.member || filter.dimension\n        });\n      }));\n      var filters = flatFilters.map(function (m, i) {\n        return _objectSpread(_objectSpread({}, m), {}, {\n          dimension: meta.resolveMember(m.member || m.dimension, ['dimensions', 'measures']),\n          operators: meta.filterOperatorsForMember(m.member || m.dimension, ['dimensions', 'measures']),\n          index: i\n        });\n      });\n      var measures = QueryBuilder.resolveMember('measures', this.state);\n      var dimensions = QueryBuilder.resolveMember('dimensions', this.state);\n      var timeDimensions = QueryBuilder.resolveMember('timeDimensions', this.state);\n      var segments = (meta && query.segments || []).map(function (m, i) {\n        return _objectSpread({\n          index: i\n        }, meta.resolveMember(m, 'segments'));\n      });\n      var availableMeasures = meta ? meta.membersForQuery(query, 'measures') : [];\n      var availableDimensions = meta ? meta.membersForQuery(query, 'dimensions') : [];\n      var availableSegments = meta ? meta.membersForQuery(query, 'segments') : [];\n      var orderMembers = uniqBy(prop('id'), [].concat(_toConsumableArray((Array.isArray(query.order) ? query.order : Object.entries(query.order || {})).map(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            id = _ref3[0],\n            order = _ref3[1];\n\n        return {\n          id: id,\n          order: order,\n          title: meta ? meta.resolveMember(id, ['measures', 'dimensions']).title : ''\n        };\n      })), _toConsumableArray([].concat(_toConsumableArray(measures), _toConsumableArray(dimensions)).map(function (_ref4) {\n        var name = _ref4.name,\n            title = _ref4.title;\n        return {\n          id: name,\n          title: title,\n          order: 'none'\n        };\n      })))); // Preserve order until the members change or manually re-ordered\n      // This is needed so that when an order member becomes active, it doesn't jump to the top of the list\n\n      var orderMemberOrderKey = JSON.stringify(orderMembers.map(function (_ref5) {\n        var id = _ref5.id;\n        return id;\n      }).sort());\n\n      if (this.orderMemberOrderKey && this.orderMemberOrder && orderMemberOrderKey === this.orderMemberOrderKey) {\n        orderMembers = this.orderMemberOrder.map(function (id) {\n          return orderMembers.find(function (member) {\n            return member.id === id;\n          });\n        });\n      } else {\n        this.orderMemberOrderKey = orderMemberOrderKey;\n        this.orderMemberOrder = orderMembers.map(function (_ref6) {\n          var id = _ref6.id;\n          return id;\n        });\n      }\n\n      return _objectSpread({\n        meta: meta,\n        metaError: metaError,\n        query: query,\n        error: queryError,\n        // Match same name as QueryRenderer prop\n        validatedQuery: validatedQuery,\n        isQueryPresent: this.isQueryPresent(),\n        chartType: chartType,\n        measures: measures,\n        dimensions: dimensions,\n        timeDimensions: timeDimensions,\n        segments: segments,\n        filters: filters,\n        orderMembers: orderMembers,\n        availableMeasures: availableMeasures,\n        availableDimensions: availableDimensions,\n        availableTimeDimensions: availableDimensions.filter(function (m) {\n          return m.type === 'time';\n        }),\n        availableSegments: availableSegments,\n        updateQuery: function updateQuery(queryUpdate) {\n          return _this3.updateQuery(queryUpdate);\n        },\n        updateMeasures: updateMethods('measures'),\n        updateDimensions: updateMethods('dimensions'),\n        updateSegments: updateMethods('segments'),\n        updateTimeDimensions: updateMethods('timeDimensions', toTimeDimension),\n        updateFilters: updateMethods('filters', toFilter),\n        updateChartType: function updateChartType(newChartType) {\n          return _this3.updateVizState({\n            chartType: newChartType\n          });\n        },\n        updateOrder: {\n          set: function set(memberId) {\n            var newOrder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n\n            _this3.updateQuery({\n              order: orderMembers.map(function (orderMember) {\n                return _objectSpread(_objectSpread({}, orderMember), {}, {\n                  order: orderMember.id === memberId ? newOrder : orderMember.order\n                });\n              }).reduce(function (acc, _ref7) {\n                var id = _ref7.id,\n                    order = _ref7.order;\n                return order !== 'none' ? [].concat(_toConsumableArray(acc), [[id, order]]) : acc;\n              }, [])\n            });\n          },\n          update: function update(order) {\n            _this3.updateQuery({\n              order: order\n            });\n          },\n          reorder: function reorder(sourceIndex, destinationIndex) {\n            if (sourceIndex == null || destinationIndex == null) {\n              return;\n            }\n\n            _this3.updateQuery({\n              order: moveItemInArray(orderMembers, sourceIndex, destinationIndex).reduce(function (acc, _ref8) {\n                var id = _ref8.id,\n                    order = _ref8.order;\n                return order !== 'none' ? [].concat(_toConsumableArray(acc), [[id, order]]) : acc;\n              }, [])\n            });\n          }\n        },\n        pivotConfig: pivotConfig,\n        updatePivotConfig: {\n          moveItem: function moveItem(_ref9) {\n            var sourceIndex = _ref9.sourceIndex,\n                destinationIndex = _ref9.destinationIndex,\n                sourceAxis = _ref9.sourceAxis,\n                destinationAxis = _ref9.destinationAxis;\n\n            _this3.updateVizState({\n              pivotConfig: movePivotItem(pivotConfig, sourceIndex, destinationIndex, sourceAxis, destinationAxis)\n            });\n          },\n          update: function update(config) {\n            var limit = config.limit;\n\n            _this3.updateVizState(_objectSpread({\n              pivotConfig: _objectSpread(_objectSpread({}, pivotConfig), config)\n            }, limit ? {\n              query: _objectSpread(_objectSpread({}, query), {}, {\n                limit: limit\n              })\n            } : null));\n          }\n        },\n        missingMembers: missingMembers,\n        refresh: this.fetchMeta,\n        isFetchingMeta: isFetchingMeta,\n        dryRunResponse: dryRunResponse\n      }, queryRendererProps);\n    }\n  }, {\n    key: \"updateQuery\",\n    value: function updateQuery(queryUpdate) {\n      var query = this.state.query;\n      this.updateVizState({\n        query: _objectSpread(_objectSpread({}, query), queryUpdate)\n      });\n    }\n  }, {\n    key: \"updateVizState\",\n    value: function () {\n      var _updateVizState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(state) {\n        var _this4 = this;\n\n        var _this$props2, setQuery, setVizState, _this$state2, stateQuery, statePivotConfig, chartType, meta, finalState, vizStateSent, handleVizStateChange, runSetters, response;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _this$props2 = this.props, setQuery = _this$props2.setQuery, setVizState = _this$props2.setVizState;\n                _this$state2 = this.state, stateQuery = _this$state2.query, statePivotConfig = _this$state2.pivotConfig, chartType = _this$state2.chartType, meta = _this$state2.meta;\n                finalState = this.applyStateChangeHeuristics(state);\n\n                if (!finalState.query) {\n                  finalState.query = _objectSpread({}, stateQuery);\n                }\n\n                vizStateSent = null;\n\n                handleVizStateChange = function handleVizStateChange(currentState) {\n                  var onVizStateChanged = _this4.props.onVizStateChanged;\n\n                  if (onVizStateChanged) {\n                    var newVizState = pick(['chartType', 'pivotConfig', 'query'], currentState); // Don't run callbacks more than once unless the viz state has changed since last time\n\n                    if (!vizStateSent || !equals(vizStateSent, newVizState)) {\n                      onVizStateChanged(newVizState);\n                      vizStateSent = clone(newVizState); // use clone to make sure we don't save object references\n                    }\n                  }\n                }; // deprecated, setters replaced by onVizStateChanged\n\n\n                runSetters = function runSetters(currentState) {\n                  if (setVizState) {\n                    setVizState(pick(['chartType', 'pivotConfig', 'query'], currentState));\n                  }\n\n                  if (currentState.query && setQuery) {\n                    setQuery(currentState.query);\n                  }\n                };\n\n                if (finalState.shouldApplyHeuristicOrder) {\n                  finalState.query.order = defaultOrder(finalState.query);\n                }\n\n                finalState.pivotConfig = ResultSet.getNormalizedPivotConfig(finalState.query, finalState.pivotConfig !== undefined ? finalState.pivotConfig : statePivotConfig);\n                finalState.missingMembers = this.getMissingMembers(finalState.query, meta);\n                finalState.chartType = finalState.chartType || state.chartType || chartType; // deprecated\n\n                runSetters(_objectSpread(_objectSpread({}, state), {}, {\n                  query: finalState.query\n                })); // Update optimistically so that UI does not stutter\n\n                this.setState(_objectSpread(_objectSpread({}, finalState), {}, {\n                  queryError: null\n                }));\n                handleVizStateChange(finalState);\n\n                if (!(QueryRenderer.isQueryPresent(finalState.query) && finalState.missingMembers.length === 0)) {\n                  _context5.next = 30;\n                  break;\n                }\n\n                _context5.prev = 15;\n                _context5.next = 18;\n                return this.cubejsApi().dryRun(finalState.query, {\n                  mutexObj: this.mutexObj\n                });\n\n              case 18:\n                response = _context5.sent;\n\n                if (finalState.shouldApplyHeuristicOrder) {\n                  finalState.query.order = (response.queryOrder || []).reduce(function (memo, current) {\n                    return _objectSpread(_objectSpread({}, memo), current);\n                  }, {});\n                }\n\n                finalState.pivotConfig = ResultSet.getNormalizedPivotConfig(response.pivotQuery, finalState.pivotConfig);\n                finalState.validatedQuery = this.validatedQuery(finalState);\n                finalState.dryRunResponse = response; // deprecated\n\n                if (QueryRenderer.isQueryPresent(stateQuery)) {\n                  runSetters(_objectSpread(_objectSpread({}, this.state), finalState));\n                }\n\n                _context5.next = 30;\n                break;\n\n              case 26:\n                _context5.prev = 26;\n                _context5.t0 = _context5[\"catch\"](15);\n                console.error(_context5.t0);\n                this.setState({\n                  queryError: _context5.t0\n                });\n\n              case 30:\n                this.setState(finalState, function () {\n                  return handleVizStateChange(_this4.state);\n                });\n\n              case 31:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[15, 26]]);\n      }));\n\n      function updateVizState(_x2) {\n        return _updateVizState.apply(this, arguments);\n      }\n\n      return updateVizState;\n    }()\n  }, {\n    key: \"validatedQuery\",\n    value: function validatedQuery(state) {\n      var _ref10 = state || this.state,\n          query = _ref10.query;\n\n      return _objectSpread(_objectSpread({}, query), {}, {\n        filters: (query.filters || []).filter(function (f) {\n          return f.operator;\n        })\n      });\n    }\n  }, {\n    key: \"defaultHeuristics\",\n    value: function defaultHeuristics$1(newState) {\n      var _this$state3 = this.state,\n          query = _this$state3.query,\n          sessionGranularity = _this$state3.sessionGranularity,\n          meta = _this$state3.meta;\n      return defaultHeuristics(newState, query, {\n        meta: meta,\n        sessionGranularity: sessionGranularity || 'day'\n      });\n    }\n  }, {\n    key: \"applyStateChangeHeuristics\",\n    value: function applyStateChangeHeuristics(newState) {\n      var _this$props3 = this.props,\n          stateChangeHeuristics = _this$props3.stateChangeHeuristics,\n          disableHeuristics = _this$props3.disableHeuristics;\n\n      if (disableHeuristics) {\n        return newState;\n      }\n\n      return stateChangeHeuristics && stateChangeHeuristics(this.state, newState) || this.defaultHeuristics(newState);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var query = this.state.query;\n      var _this$props4 = this.props,\n          cubejsApi = _this$props4.cubejsApi,\n          _render = _this$props4.render,\n          wrapWithQueryRenderer = _this$props4.wrapWithQueryRenderer;\n\n      if (wrapWithQueryRenderer) {\n        return /*#__PURE__*/React.createElement(QueryRenderer, {\n          query: query,\n          cubejsApi: cubejsApi,\n          resetResultSetOnChange: false,\n          render: function render(queryRendererProps) {\n            if (_render) {\n              return _render(_this5.prepareRenderProps(queryRendererProps));\n            }\n\n            return null;\n          }\n        });\n      } else {\n        if (_render) {\n          return _render(this.prepareRenderProps());\n        }\n\n        return null;\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: // This is an anti-pattern, only kept for backward compatibility\n    // https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#anti-pattern-unconditionally-copying-props-to-state\n    function getDerivedStateFromProps(props, state) {\n      if (props.query || props.vizState) {\n        var nextState = _objectSpread(_objectSpread({}, state), props.vizState || {});\n\n        if (Array.isArray(props.query)) {\n          throw new Error('Array of queries is not supported.');\n        }\n\n        return _objectSpread(_objectSpread({}, nextState), {}, {\n          query: _objectSpread(_objectSpread({}, nextState.query), props.query || {})\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"resolveMember\",\n    value: function resolveMember(type, _ref11) {\n      var meta = _ref11.meta,\n          query = _ref11.query;\n\n      if (!meta) {\n        return [];\n      }\n\n      if (Array.isArray(query)) {\n        return query.reduce(function (memo, currentQuery) {\n          return memo.concat(QueryBuilder.resolveMember(type, {\n            meta: meta,\n            query: currentQuery\n          }));\n        }, []);\n      }\n\n      if (type === 'timeDimensions') {\n        return (query.timeDimensions || []).map(function (m, index) {\n          return _objectSpread(_objectSpread({}, m), {}, {\n            dimension: _objectSpread(_objectSpread({}, meta.resolveMember(m.dimension, 'dimensions')), {}, {\n              granularities: granularities\n            }),\n            index: index\n          });\n        });\n      }\n\n      return (query[type] || []).map(function (m, index) {\n        return _objectSpread({\n          index: index\n        }, meta.resolveMember(m, type));\n      });\n    }\n  }]);\n\n  return QueryBuilder;\n}(React.Component);\n\nQueryBuilder.contextType = CubeContext;\nQueryBuilder.defaultProps = {\n  cubejsApi: null,\n  stateChangeHeuristics: null,\n  disableHeuristics: false,\n  render: null,\n  wrapWithQueryRenderer: true,\n  defaultChartType: 'line',\n  defaultQuery: {},\n  initialVizState: null,\n  onVizStateChanged: null,\n  // deprecated\n  query: null,\n  setQuery: null,\n  vizState: null,\n  setVizState: null\n};\n\nvar CubeProvider = function CubeProvider(_ref) {\n  var cubejsApi = _ref.cubejsApi,\n      children = _ref.children;\n  return /*#__PURE__*/React.createElement(CubeContext.Provider, {\n    value: {\n      cubejsApi: cubejsApi\n    }\n  }, children);\n};\n\nfunction useDeepCompareMemoize(value) {\n  var ref = useRef([]);\n\n  if (!equals(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}\n\nfunction useCubeQuery(query) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var mutexRef = useRef({});\n  var isMounted = useRef(true);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentQuery = _useState2[0],\n      setCurrentQuery = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      resultSet = _useState6[0],\n      setResultSet = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      progress = _useState8[0],\n      setProgress = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      error = _useState10[0],\n      setError = _useState10[1];\n\n  var context = useContext(CubeContext);\n  var subscribeRequest = null;\n\n  var progressCallback = function progressCallback(_ref) {\n    var progressResponse = _ref.progressResponse;\n    return setProgress(progressResponse);\n  };\n\n  function fetch() {\n    return _fetch.apply(this, arguments);\n  }\n\n  function _fetch() {\n    _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var resetResultSetOnChange, cubejsApi, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              resetResultSetOnChange = options.resetResultSetOnChange;\n              cubejsApi = options.cubejsApi || (context === null || context === void 0 ? void 0 : context.cubejsApi);\n\n              if (cubejsApi) {\n                _context2.next = 4;\n                break;\n              }\n\n              throw new Error('Cube.js API client is not provided');\n\n            case 4:\n              if (resetResultSetOnChange) {\n                setResultSet(null);\n              }\n\n              setError(null);\n              setLoading(true);\n              _context2.prev = 7;\n              _context2.next = 10;\n              return cubejsApi.load(query, {\n                mutexObj: mutexRef.current,\n                mutexKey: 'query',\n                progressCallback: progressCallback\n              });\n\n            case 10:\n              response = _context2.sent;\n\n              if (isMounted.current) {\n                setResultSet(response);\n                setProgress(null);\n              }\n\n              _context2.next = 17;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](7);\n\n              if (isMounted.current) {\n                setError(_context2.t0);\n                setResultSet(null);\n                setProgress(null);\n              }\n\n            case 17:\n              if (isMounted.current) {\n                setLoading(false);\n              }\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[7, 14]]);\n    }));\n    return _fetch.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  useEffect(function () {\n    var _options$skip = options.skip,\n        skip = _options$skip === void 0 ? false : _options$skip,\n        resetResultSetOnChange = options.resetResultSetOnChange;\n    var cubejsApi = options.cubejsApi || (context === null || context === void 0 ? void 0 : context.cubejsApi);\n\n    if (!cubejsApi) {\n      throw new Error('Cube.js API client is not provided');\n    }\n\n    function loadQuery() {\n      return _loadQuery.apply(this, arguments);\n    }\n\n    function _loadQuery() {\n      _loadQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!skip && isQueryPresent(query))) {\n                  _context.next = 20;\n                  break;\n                }\n\n                if (!areQueriesEqual(currentQuery, query)) {\n                  if (resetResultSetOnChange == null || resetResultSetOnChange) {\n                    setResultSet(null);\n                  }\n\n                  setCurrentQuery(query);\n                }\n\n                setError(null);\n                setLoading(true);\n                _context.prev = 4;\n\n                if (!subscribeRequest) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 8;\n                return subscribeRequest.unsubscribe();\n\n              case 8:\n                subscribeRequest = null;\n\n              case 9:\n                if (!options.subscribe) {\n                  _context.next = 13;\n                  break;\n                }\n\n                subscribeRequest = cubejsApi.subscribe(query, {\n                  mutexObj: mutexRef.current,\n                  mutexKey: 'query',\n                  progressCallback: progressCallback\n                }, function (e, result) {\n                  if (isMounted.current) {\n                    if (e) {\n                      setError(e);\n                    } else {\n                      setResultSet(result);\n                    }\n\n                    setLoading(false);\n                    setProgress(null);\n                  }\n                });\n                _context.next = 15;\n                break;\n\n              case 13:\n                _context.next = 15;\n                return fetch();\n\n              case 15:\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](4);\n\n                if (isMounted.current) {\n                  setError(_context.t0);\n                  setResultSet(null);\n                  setLoading(false);\n                  setProgress(null);\n                }\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[4, 17]]);\n      }));\n      return _loadQuery.apply(this, arguments);\n    }\n\n    loadQuery();\n    return function () {\n      if (subscribeRequest) {\n        subscribeRequest.unsubscribe();\n        subscribeRequest = null;\n      }\n    };\n  }, useDeepCompareMemoize([query, Object.keys(query && query.order || {}), options, context]));\n  return {\n    isLoading: isLoading,\n    resultSet: resultSet,\n    error: error,\n    progress: progress,\n    previousQuery: currentQuery,\n    refetch: fetch\n  };\n}\n\nfunction useDryRun(query) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var context = useContext(CubeContext);\n  var mutexRef = useRef({});\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  useEffect(function () {\n    var isMounted = true;\n    var _options$skip = options.skip,\n        skip = _options$skip === void 0 ? false : _options$skip;\n    var cubejsApi = options.cubejsApi || context && context.cubejsApi;\n\n    if (!cubejsApi) {\n      throw new Error('Cube.js API client is not provided');\n    }\n\n    function loadQuery() {\n      return _loadQuery.apply(this, arguments);\n    }\n\n    function _loadQuery() {\n      _loadQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var dryRunResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!skip && query && isQueryPresent(query))) {\n                  _context.next = 13;\n                  break;\n                }\n\n                setError(null);\n                setLoading(true);\n                _context.prev = 3;\n                _context.next = 6;\n                return cubejsApi.dryRun(query, {\n                  mutexObj: mutexRef.current,\n                  mutexKey: 'dry-run'\n                });\n\n              case 6:\n                dryRunResponse = _context.sent;\n\n                if (isMounted) {\n                  setResponse(dryRunResponse);\n                  setLoading(false);\n                }\n\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n\n                if (isMounted) {\n                  setError(_context.t0);\n                  setLoading(false);\n                }\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 10]]);\n      }));\n      return _loadQuery.apply(this, arguments);\n    }\n\n    loadQuery();\n    return function () {\n      isMounted = false;\n    };\n  }, useDeepCompareMemoize([query, Object.keys(query && query.order || {}), options, context]));\n  return {\n    isLoading: isLoading,\n    error: error,\n    response: response\n  };\n}\n\nexport { CubeContext, CubeProvider, QueryBuilder, QueryRenderer, QueryRendererWithTotals, useCubeQuery, useDryRun };","map":{"version":3,"sources":["../src/CubeContext.js","../src/QueryRenderer.jsx","../src/QueryRendererWithTotals.jsx","../src/QueryBuilder.jsx","../src/CubeProvider.jsx","../src/hooks/deep-compare-memoize.js","../src/hooks/cube-query.js","../src/hooks/dry-run.js"],"names":["createContext","QueryRenderer","React","Component","isQueryPresent","query","queries","render","cubejsApi","loadSql","updateOnlyOnStateChange","equals","nextProps","prevProps","resetResultSetOnChange","isLoading","error","sqlQuery","resultSet","mutexObj","mutexKey","Promise","resultPromises","name","fromPairs","loadState","loadingState","QueryRendererWithTotals","restProps","totals","dimensions","timeDimensions","granularity","undefined","main","granularities","title","QueryBuilder","props","nextState","Array","meta","currentQuery","type","dimension","m","index","chartType","validatedQuery","missingMembers","isFetchingMeta","dryRunResponse","schemaVersion","onSchemaChange","newMeta","refresh","metaError","resolvedMember","getName","member","toTimeDimension","rangeSelection","compareDateRange","dateRange","toFilter","operator","values","updateMethods","toQuery","add","remove","members","update","queryError","pivotConfig","flatFilters","uniqBy","prop","filter","filters","operators","i","measures","segments","availableMeasures","availableDimensions","availableSegments","orderMembers","Object","id","order","orderMemberOrderKey","availableTimeDimensions","updateQuery","updateMeasures","updateDimensions","updateSegments","updateTimeDimensions","updateFilters","updateChartType","newChartType","updateOrder","set","newOrder","orderMember","reorder","sourceIndex","destinationIndex","updatePivotConfig","moveItem","sourceAxis","destinationAxis","movePivotItem","limit","config","setQuery","setVizState","stateQuery","statePivotConfig","finalState","vizStateSent","handleVizStateChange","onVizStateChanged","newVizState","pick","clone","runSetters","currentState","defaultOrder","ResultSet","state","response","console","f","sessionGranularity","defaultHeuristics","stateChangeHeuristics","disableHeuristics","wrapWithQueryRenderer","defaultChartType","defaultQuery","initialVizState","vizState","CubeProvider","children","ref","useRef","options","mutexRef","isMounted","setCurrentQuery","useState","setLoading","setResultSet","progress","setProgress","setError","context","useContext","subscribeRequest","progressCallback","progressResponse","useEffect","skip","areQueriesEqual","fetch","loadQuery","useDeepCompareMemoize","previousQuery","refetch","setResponse"],"mappings":"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","sourcesContent":["import { createContext } from 'react';\n\nexport default createContext(null);\n","import React from 'react';\nimport { equals, toPairs, fromPairs } from 'ramda';\nimport { isQueryPresent } from '@cubejs-client/core';\n\nimport CubeContext from './CubeContext';\n\nexport default class QueryRenderer extends React.Component {\n  static isQueryPresent(query) {\n    return isQueryPresent(query);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.mutexObj = {};\n  }\n\n  componentDidMount() {\n    const { query, queries } = this.props;\n    if (query) {\n      this.load(query);\n    }\n    if (queries) {\n      this.loadQueries(queries);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const {\n      query, queries, render, cubejsApi, loadSql, updateOnlyOnStateChange\n    } = this.props;\n    if (!updateOnlyOnStateChange) {\n      return true;\n    }\n    return !equals(nextProps.query, query)\n      || !equals(nextProps.queries, queries)\n      || ((nextProps.render == null || render == null) && nextProps.render !== render)\n      || nextProps.cubejsApi !== cubejsApi\n      || nextProps.loadSql !== loadSql\n      || !equals(nextState, this.state)\n      || nextProps.updateOnlyOnStateChange !== updateOnlyOnStateChange;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { query, queries } = this.props;\n    if (!equals(prevProps.query, query)) {\n      this.load(query);\n    }\n\n    if (!equals(prevProps.queries, queries)) {\n      this.loadQueries(queries);\n    }\n  }\n\n  cubejsApi() {\n    // eslint-disable-next-line react/destructuring-assignment\n    return this.props.cubejsApi || this.context && this.context.cubejsApi;\n  }\n\n  load(query) {\n    const { resetResultSetOnChange } = this.props;\n    this.setState({\n      isLoading: true,\n      error: null,\n      sqlQuery: null,\n      ...(resetResultSetOnChange ? { resultSet: null } : {})\n    });\n    const { loadSql } = this.props;\n    const cubejsApi = this.cubejsApi();\n    if (query && QueryRenderer.isQueryPresent(query)) {\n      if (loadSql === 'only') {\n        cubejsApi.sql(query, { mutexObj: this.mutexObj, mutexKey: 'sql' })\n          .then(sqlQuery => this.setState({ sqlQuery, error: null, isLoading: false }))\n          .catch(error => this.setState({\n            ...(resetResultSetOnChange ? { resultSet: null } : {}),\n            error,\n            isLoading: false\n          }));\n      } else if (loadSql) {\n        Promise.all([\n          cubejsApi.sql(query, { mutexObj: this.mutexObj, mutexKey: 'sql' }),\n          cubejsApi.load(query, { mutexObj: this.mutexObj, mutexKey: 'query' })\n        ]).then(([sqlQuery, resultSet]) => this.setState({\n          sqlQuery, resultSet, error: null, isLoading: false\n        }))\n          .catch(error => this.setState({\n            ...(resetResultSetOnChange ? { resultSet: null } : {}),\n            error,\n            isLoading: false\n          }));\n      } else {\n        cubejsApi.load(query, { mutexObj: this.mutexObj, mutexKey: 'query' })\n          .then(resultSet => this.setState({ resultSet, error: null, isLoading: false }))\n          .catch(error => this.setState({\n            ...(resetResultSetOnChange ? { resultSet: null } : {}),\n            error,\n            isLoading: false\n          }));\n      }\n    }\n  }\n\n  loadQueries(queries) {\n    const cubejsApi = this.cubejsApi();\n    const { resetResultSetOnChange } = this.props;\n    this.setState({\n      isLoading: true,\n      ...(resetResultSetOnChange ? { resultSet: null } : {}),\n      error: null\n    });\n\n    const resultPromises = Promise.all(toPairs(queries).map(\n      ([name, query]) => cubejsApi.load(query, { mutexObj: this.mutexObj, mutexKey: name }).then(r => [name, r])\n    ));\n\n    resultPromises\n      .then(resultSet => this.setState({\n        resultSet: fromPairs(resultSet),\n        error: null,\n        isLoading: false\n      }))\n      .catch(error => this.setState({\n        ...(resetResultSetOnChange ? { resultSet: null } : {}),\n        error,\n        isLoading: false\n      }));\n  }\n\n  render() {\n    const {\n      error, queries, resultSet, isLoading, sqlQuery\n    } = this.state;\n    const { render } = this.props;\n    const loadState = {\n      error,\n      resultSet: queries ? (resultSet || {}) : resultSet,\n      loadingState: { isLoading },\n      sqlQuery\n    };\n    if (render) {\n      return render(loadState);\n    }\n    return null;\n  }\n}\n\nQueryRenderer.contextType = CubeContext;\n\nQueryRenderer.defaultProps = {\n  cubejsApi: null,\n  query: null,\n  render: null,\n  queries: null,\n  loadSql: null,\n  updateOnlyOnStateChange: false,\n  resetResultSetOnChange: true\n};\n","import React from 'react';\nimport QueryRenderer from './QueryRenderer.jsx';\n\nconst QueryRendererWithTotals = ({ query, ...restProps }) => (\n  <QueryRenderer\n    queries={{\n      totals: {\n        ...query,\n        dimensions: [],\n        timeDimensions: query.timeDimensions\n          ? query.timeDimensions.map(td => ({ ...td, granularity: null }))\n          : undefined\n      },\n      main: query\n    }}\n    {...restProps}\n  />\n);\n\nQueryRendererWithTotals.defaultProps = {\n  query: null,\n  render: null,\n  queries: null,\n  loadSql: null\n};\n\nexport default QueryRendererWithTotals;\n","import React from 'react';\nimport { prop, uniqBy, equals, pick, clone } from 'ramda';\nimport {\n  ResultSet,\n  moveItemInArray,\n  defaultOrder,\n  flattenFilters,\n  getQueryMembers,\n  movePivotItem,\n  defaultHeuristics,\n} from '@cubejs-client/core';\nimport QueryRenderer from './QueryRenderer.jsx';\nimport CubeContext from './CubeContext';\n\nconst granularities = [\n  { name: undefined, title: 'w/o grouping' },\n  { name: 'second', title: 'Second' },\n  { name: 'minute', title: 'Minute' },\n  { name: 'hour', title: 'Hour' },\n  { name: 'day', title: 'Day' },\n  { name: 'week', title: 'Week' },\n  { name: 'month', title: 'Month' },\n  { name: 'year', title: 'Year' },\n];\n\nexport default class QueryBuilder extends React.Component {\n  // This is an anti-pattern, only kept for backward compatibility\n  // https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#anti-pattern-unconditionally-copying-props-to-state\n  static getDerivedStateFromProps(props, state) {\n    if (props.query || props.vizState) {\n      const nextState = {\n        ...state,\n        ...(props.vizState || {}),\n      };\n\n      if (Array.isArray(props.query)) {\n        throw new Error('Array of queries is not supported.');\n      }\n\n      return {\n        ...nextState,\n        query: {\n          ...nextState.query,\n          ...(props.query || {}),\n        },\n      };\n    }\n    return null;\n  }\n\n  static resolveMember(type, { meta, query }) {\n    if (!meta) {\n      return [];\n    }\n\n    if (Array.isArray(query)) {\n      return query.reduce(\n        (memo, currentQuery) => memo.concat(\n          QueryBuilder.resolveMember(type, {\n            meta,\n            query: currentQuery,\n          })\n        ),\n        []\n      );\n    }\n\n    if (type === 'timeDimensions') {\n      return (query.timeDimensions || []).map((m, index) => ({\n        ...m,\n        dimension: {\n          ...meta.resolveMember(m.dimension, 'dimensions'),\n          granularities,\n        },\n        index,\n      }));\n    }\n\n    return (query[type] || []).map((m, index) => ({\n      index,\n      ...meta.resolveMember(m, type),\n    }));\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: props.defaultQuery || props.query,\n      chartType: props.defaultChartType,\n      validatedQuery: props.query, // deprecated, validatedQuery should not be set until after dry-run for safety\n      missingMembers: [],\n      isFetchingMeta: false,\n      dryRunResponse: null,\n      ...props.vizState, // deprecated\n      ...props.initialVizState,\n    };\n\n    this.mutexObj = {};\n  }\n\n  async componentDidMount() {\n    await this.fetchMeta();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const { schemaVersion, onSchemaChange } = this.props;\n    const { meta } = this.state;\n\n    if (prevProps.schemaVersion !== schemaVersion) {\n      try {\n        const newMeta = await this.cubejsApi().meta();\n        if (!equals(newMeta, meta) && typeof onSchemaChange === 'function') {\n          onSchemaChange({\n            schemaVersion,\n            refresh: async () => {\n              await this.fetchMeta();\n            },\n          });\n        }\n      } catch (error) {\n        // eslint-disable-next-line\n        this.setState({ metaError: error });\n      }\n    }\n  }\n\n  fetchMeta = async () => {\n    let meta;\n    let metaError = null;\n\n    try {\n      this.setState({ isFetchingMeta: true });\n      meta = await this.cubejsApi().meta();\n    } catch (error) {\n      metaError = error;\n    }\n\n    this.setState(\n      {\n        meta,\n        metaError,\n        isFetchingMeta: false,\n      },\n      () => {\n        // Run update query to force viz state update\n        // This will catch any new missing members, and also validate the query against the new meta\n        this.updateQuery({});\n      }\n    );\n  };\n\n  cubejsApi() {\n    const { cubejsApi } = this.props;\n    // eslint-disable-next-line react/destructuring-assignment\n    return cubejsApi || (this.context && this.context.cubejsApi);\n  }\n\n  getMissingMembers(query, meta) {\n    if (!meta) {\n      return [];\n    }\n\n    return getQueryMembers(query)\n      .map((member) => {\n        const resolvedMember = meta.resolveMember(member, ['measures', 'dimensions', 'segments']);\n        if (resolvedMember.error) {\n          return member;\n        }\n        return false;\n      })\n      .filter(Boolean);\n  }\n\n  isQueryPresent() {\n    const { query } = this.state;\n    return QueryRenderer.isQueryPresent(query);\n  }\n\n  prepareRenderProps(queryRendererProps) {\n    const getName = (member) => member.name;\n    const toTimeDimension = (member) => {\n      const rangeSelection = member.compareDateRange\n        ? { compareDateRange: member.compareDateRange }\n        : { dateRange: member.dateRange };\n      return {\n        dimension: member.dimension.name,\n        granularity: member.granularity,\n        ...rangeSelection,\n      };\n    };\n    const toFilter = (member) => ({\n      member: member.member?.name || member.dimension?.name,\n      operator: member.operator,\n      values: member.values,\n    });\n\n    const updateMethods = (memberType, toQuery = getName) => ({\n      add: (member) => {\n        const { query } = this.state;\n        this.updateQuery({\n          [memberType]: (query[memberType] || []).concat(toQuery(member)),\n        });\n      },\n      remove: (member) => {\n        const { query } = this.state;\n        const members = (query[memberType] || []).concat([]);\n        members.splice(member.index, 1);\n        return this.updateQuery({\n          [memberType]: members,\n        });\n      },\n      update: (member, updateWith) => {\n        const { query } = this.state;\n        const members = (query[memberType] || []).concat([]);\n        members.splice(member.index, 1, toQuery(updateWith));\n        return this.updateQuery({\n          [memberType]: members,\n        });\n      },\n    });\n\n    const {\n      meta,\n      metaError,\n      query,\n      queryError,\n      chartType,\n      pivotConfig,\n      validatedQuery,\n      missingMembers,\n      isFetchingMeta,\n      dryRunResponse,\n    } = this.state;\n\n    const flatFilters = uniqBy(\n      prop('member'),\n      flattenFilters((meta && query.filters) || []).map((filter) => ({\n        ...filter,\n        member: filter.member || filter.dimension,\n      }))\n    );\n\n    const filters = flatFilters.map((m, i) => ({\n      ...m,\n      dimension: meta.resolveMember(m.member || m.dimension, ['dimensions', 'measures']),\n      operators: meta.filterOperatorsForMember(m.member || m.dimension, ['dimensions', 'measures']),\n      index: i,\n    }));\n\n    const measures = QueryBuilder.resolveMember('measures', this.state);\n    const dimensions = QueryBuilder.resolveMember('dimensions', this.state);\n    const timeDimensions = QueryBuilder.resolveMember('timeDimensions', this.state);\n    const segments = ((meta && query.segments) || []).map((m, i) => ({\n      index: i,\n      ...meta.resolveMember(m, 'segments'),\n    }));\n\n    const availableMeasures = meta ? meta.membersForQuery(query, 'measures') : [];\n    const availableDimensions = meta ? meta.membersForQuery(query, 'dimensions') : [];\n    const availableSegments = meta ? meta.membersForQuery(query, 'segments') : [];\n\n    let orderMembers = uniqBy(prop('id'), [\n      ...(Array.isArray(query.order) ? query.order : Object.entries(query.order || {})).map(([id, order]) => ({\n        id,\n        order,\n        title: meta ? meta.resolveMember(id, ['measures', 'dimensions']).title : '',\n      })),\n      // uniqBy prefers first, so these will only be added if not already in the query\n      ...[...measures, ...dimensions].map(({ name, title }) => ({ id: name, title, order: 'none' })),\n    ]);\n\n    // Preserve order until the members change or manually re-ordered\n    // This is needed so that when an order member becomes active, it doesn't jump to the top of the list\n    const orderMemberOrderKey = JSON.stringify(orderMembers.map(({ id }) => id).sort());\n    if (this.orderMemberOrderKey && this.orderMemberOrder && orderMemberOrderKey === this.orderMemberOrderKey) {\n      orderMembers = this.orderMemberOrder.map((id) => orderMembers.find((member) => member.id === id));\n    } else {\n      this.orderMemberOrderKey = orderMemberOrderKey;\n      this.orderMemberOrder = orderMembers.map(({ id }) => id);\n    }\n\n    return {\n      meta,\n      metaError,\n      query,\n      error: queryError, // Match same name as QueryRenderer prop\n      validatedQuery,\n      isQueryPresent: this.isQueryPresent(),\n      chartType,\n      measures,\n      dimensions,\n      timeDimensions,\n      segments,\n      filters,\n      orderMembers,\n      availableMeasures,\n      availableDimensions,\n      availableTimeDimensions: availableDimensions.filter((m) => m.type === 'time'),\n      availableSegments,\n      updateQuery: (queryUpdate) => this.updateQuery(queryUpdate),\n      updateMeasures: updateMethods('measures'),\n      updateDimensions: updateMethods('dimensions'),\n      updateSegments: updateMethods('segments'),\n      updateTimeDimensions: updateMethods('timeDimensions', toTimeDimension),\n      updateFilters: updateMethods('filters', toFilter),\n      updateChartType: (newChartType) => this.updateVizState({ chartType: newChartType }),\n      updateOrder: {\n        set: (memberId, newOrder = 'asc') => {\n          this.updateQuery({\n            order: orderMembers\n              .map((orderMember) => ({\n                ...orderMember,\n                order: orderMember.id === memberId ? newOrder : orderMember.order,\n              }))\n              .reduce((acc, { id, order }) => (order !== 'none' ? [...acc, [id, order]] : acc), []),\n          });\n        },\n        update: (order) => {\n          this.updateQuery({\n            order,\n          });\n        },\n        reorder: (sourceIndex, destinationIndex) => {\n          if (sourceIndex == null || destinationIndex == null) {\n            return;\n          }\n\n          this.updateQuery({\n            order: moveItemInArray(orderMembers, sourceIndex, destinationIndex).reduce(\n              (acc, { id, order }) => (order !== 'none' ? [...acc, [id, order]] : acc),\n              []\n            ),\n          });\n        },\n      },\n      pivotConfig,\n      updatePivotConfig: {\n        moveItem: ({ sourceIndex, destinationIndex, sourceAxis, destinationAxis }) => {\n          this.updateVizState({\n            pivotConfig: movePivotItem(pivotConfig, sourceIndex, destinationIndex, sourceAxis, destinationAxis),\n          });\n        },\n        update: (config) => {\n          const { limit } = config;\n\n          this.updateVizState({\n            pivotConfig: {\n              ...pivotConfig,\n              ...config,\n            },\n            ...(limit ? { query: { ...query, limit } } : null),\n          });\n        },\n      },\n      missingMembers,\n      refresh: this.fetchMeta,\n      isFetchingMeta,\n      dryRunResponse,\n      ...queryRendererProps,\n    };\n  }\n\n  updateQuery(queryUpdate) {\n    const { query } = this.state;\n\n    this.updateVizState({\n      query: {\n        ...query,\n        ...queryUpdate,\n      },\n    });\n  }\n\n  async updateVizState(state) {\n    const { setQuery, setVizState } = this.props;\n    const { query: stateQuery, pivotConfig: statePivotConfig, chartType, meta } = this.state;\n\n    const finalState = this.applyStateChangeHeuristics(state);\n    if (!finalState.query) {\n      finalState.query = { ...stateQuery };\n    }\n\n    let vizStateSent = null;\n    const handleVizStateChange = (currentState) => {\n      const { onVizStateChanged } = this.props;\n      if (onVizStateChanged) {\n        const newVizState = pick(['chartType', 'pivotConfig', 'query'], currentState);\n        // Don't run callbacks more than once unless the viz state has changed since last time\n        if (!vizStateSent || !equals(vizStateSent, newVizState)) {\n          onVizStateChanged(newVizState);\n          vizStateSent = clone(newVizState); // use clone to make sure we don't save object references\n        }\n      }\n    };\n\n    // deprecated, setters replaced by onVizStateChanged\n    const runSetters = (currentState) => {\n      if (setVizState) {\n        setVizState(pick(['chartType', 'pivotConfig', 'query'], currentState));\n      }\n      if (currentState.query && setQuery) {\n        setQuery(currentState.query);\n      }\n    };\n\n    if (finalState.shouldApplyHeuristicOrder) {\n      finalState.query.order = defaultOrder(finalState.query);\n    }\n\n    finalState.pivotConfig = ResultSet.getNormalizedPivotConfig(\n      finalState.query,\n      finalState.pivotConfig !== undefined ? finalState.pivotConfig : statePivotConfig\n    );\n\n    finalState.missingMembers = this.getMissingMembers(finalState.query, meta);\n    finalState.chartType = finalState.chartType || state.chartType || chartType;\n\n    // deprecated\n    runSetters({\n      ...state,\n      query: finalState.query,\n    });\n\n    // Update optimistically so that UI does not stutter\n    this.setState({\n      ...finalState,\n      queryError: null,\n    });\n\n    handleVizStateChange(finalState);\n\n    if (QueryRenderer.isQueryPresent(finalState.query) && finalState.missingMembers.length === 0) {\n      try {\n        const response = await this.cubejsApi().dryRun(finalState.query, {\n          mutexObj: this.mutexObj,\n        });\n\n        if (finalState.shouldApplyHeuristicOrder) {\n          finalState.query.order = (response.queryOrder || []).reduce((memo, current) => ({ ...memo, ...current }), {});\n        }\n\n        finalState.pivotConfig = ResultSet.getNormalizedPivotConfig(response.pivotQuery, finalState.pivotConfig);\n        finalState.validatedQuery = this.validatedQuery(finalState);\n        finalState.dryRunResponse = response;\n\n        // deprecated\n        if (QueryRenderer.isQueryPresent(stateQuery)) {\n          runSetters({\n            ...this.state,\n            ...finalState,\n          });\n        }\n      } catch (error) {\n        console.error(error);\n        this.setState({\n          queryError: error,\n        });\n      }\n    }\n\n    this.setState(finalState, () => handleVizStateChange(this.state));\n  }\n\n  validatedQuery(state) {\n    const { query } = state || this.state;\n\n    return {\n      ...query,\n      filters: (query.filters || []).filter((f) => f.operator),\n    };\n  }\n\n  defaultHeuristics(newState) {\n    const { query, sessionGranularity, meta } = this.state;\n\n    return defaultHeuristics(newState, query, {\n      meta,\n      sessionGranularity: sessionGranularity || 'day',\n    });\n  }\n\n  applyStateChangeHeuristics(newState) {\n    const { stateChangeHeuristics, disableHeuristics } = this.props;\n    if (disableHeuristics) {\n      return newState;\n    }\n    return (stateChangeHeuristics && stateChangeHeuristics(this.state, newState)) || this.defaultHeuristics(newState);\n  }\n\n  render() {\n    const { query } = this.state;\n    const { cubejsApi, render, wrapWithQueryRenderer } = this.props;\n\n    if (wrapWithQueryRenderer) {\n      return (\n        <QueryRenderer\n          query={query}\n          cubejsApi={cubejsApi}\n          resetResultSetOnChange={false}\n          render={(queryRendererProps) => {\n            if (render) {\n              return render(this.prepareRenderProps(queryRendererProps));\n            }\n            return null;\n          }}\n        />\n      );\n    } else {\n      if (render) {\n        return render(this.prepareRenderProps());\n      }\n      return null;\n    }\n  }\n}\n\nQueryBuilder.contextType = CubeContext;\n\nQueryBuilder.defaultProps = {\n  cubejsApi: null,\n  stateChangeHeuristics: null,\n  disableHeuristics: false,\n  render: null,\n  wrapWithQueryRenderer: true,\n  defaultChartType: 'line',\n  defaultQuery: {},\n  initialVizState: null,\n  onVizStateChanged: null,\n\n  // deprecated\n  query: null,\n  setQuery: null,\n  vizState: null,\n  setVizState: null,\n};\n","import React from 'react';\nimport CubeContext from './CubeContext';\n\nconst CubeProvider = ({ cubejsApi, children }) => (\n  <CubeContext.Provider value={{ cubejsApi }}>\n    {children}\n  </CubeContext.Provider>\n);\n\nexport default CubeProvider;\n","import { useRef } from 'react';\nimport { equals } from 'ramda';\n\nexport default function useDeepCompareMemoize(value) {\n  const ref = useRef([]);\n\n  if (!equals(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}\n","import { useContext, useEffect, useState, useRef } from 'react';\nimport { isQueryPresent, areQueriesEqual } from '@cubejs-client/core';\n\nimport CubeContext from '../CubeContext';\nimport useDeepCompareMemoize from './deep-compare-memoize';\n\nexport default function useCubeQuery(query, options = {}) {\n  const mutexRef = useRef({});\n  const isMounted = useRef(true);\n  const [currentQuery, setCurrentQuery] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const [resultSet, setResultSet] = useState(null);\n  const [progress, setProgress] = useState(null);\n  const [error, setError] = useState(null);\n  const context = useContext(CubeContext);\n\n  let subscribeRequest = null;\n\n  const progressCallback = ({ progressResponse }) => setProgress(progressResponse);\n\n  async function fetch() {\n    const { resetResultSetOnChange } = options;\n    const cubejsApi = options.cubejsApi || context?.cubejsApi;\n\n    if (!cubejsApi) {\n      throw new Error('Cube.js API client is not provided');\n    }\n\n    if (resetResultSetOnChange) {\n      setResultSet(null);\n    }\n\n    setError(null);\n    setLoading(true);\n\n    try {\n      const response = await cubejsApi.load(query, {\n        mutexObj: mutexRef.current,\n        mutexKey: 'query',\n        progressCallback,\n      });\n\n      if (isMounted.current) {\n        setResultSet(response);\n        setProgress(null);\n      }\n    } catch (error) {\n      if (isMounted.current) {\n        setError(error);\n        setResultSet(null);\n        setProgress(null);\n      }\n    }\n\n    if (isMounted.current) {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    const { skip = false, resetResultSetOnChange } = options;\n\n    const cubejsApi = options.cubejsApi || context?.cubejsApi;\n\n    if (!cubejsApi) {\n      throw new Error('Cube.js API client is not provided');\n    }\n\n    async function loadQuery() {\n      if (!skip && isQueryPresent(query)) {\n        if (!areQueriesEqual(currentQuery, query)) {\n          if (resetResultSetOnChange == null || resetResultSetOnChange) {\n            setResultSet(null);\n          }\n          setCurrentQuery(query);\n        }\n\n        setError(null);\n        setLoading(true);\n\n        try {\n          if (subscribeRequest) {\n            await subscribeRequest.unsubscribe();\n            subscribeRequest = null;\n          }\n\n          if (options.subscribe) {\n            subscribeRequest = cubejsApi.subscribe(\n              query,\n              {\n                mutexObj: mutexRef.current,\n                mutexKey: 'query',\n                progressCallback,\n              },\n              (e, result) => {\n                if (isMounted.current) {\n                  if (e) {\n                    setError(e);\n                  } else {\n                    setResultSet(result);\n                  }\n                  setLoading(false);\n                  setProgress(null);\n                }\n              }\n            );\n          } else {\n            await fetch();\n          }\n        } catch (e) {\n          if (isMounted.current) {\n            setError(e);\n            setResultSet(null);\n            setLoading(false);\n            setProgress(null);\n          }\n        }\n      }\n    }\n\n    loadQuery();\n\n    return () => {\n      if (subscribeRequest) {\n        subscribeRequest.unsubscribe();\n        subscribeRequest = null;\n      }\n    };\n  }, useDeepCompareMemoize([query, Object.keys((query && query.order) || {}), options, context]));\n\n  return {\n    isLoading,\n    resultSet,\n    error,\n    progress,\n    previousQuery: currentQuery,\n    refetch: fetch\n  };\n}\n","import { useContext, useEffect, useState, useRef } from 'react';\nimport { isQueryPresent } from '@cubejs-client/core';\n\nimport CubeContext from '../CubeContext';\nimport useDeepCompareMemoize from './deep-compare-memoize';\n\nexport default function useDryRun(query, options = {}) {\n  const context = useContext(CubeContext);\n  const mutexRef = useRef({});\n  const [response, setResponse] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    const { skip = false } = options;\n\n    const cubejsApi = options.cubejsApi || (context && context.cubejsApi);\n    if (!cubejsApi) {\n      throw new Error('Cube.js API client is not provided');\n    }\n\n    async function loadQuery() {\n      if (!skip && query && isQueryPresent(query)) {\n        setError(null);\n        setLoading(true);\n\n        try {\n          const dryRunResponse = await cubejsApi.dryRun(query, {\n            mutexObj: mutexRef.current,\n            mutexKey: 'dry-run',\n          });\n          if (isMounted) {\n            setResponse(dryRunResponse);\n            setLoading(false);\n          }\n        } catch (err) {\n          if (isMounted) {\n            setError(err);\n            setLoading(false);\n          }\n        }\n      }\n    }\n\n    loadQuery();\n\n    return () => {\n      isMounted = false;\n    };\n  }, useDeepCompareMemoize([query, Object.keys((query && query.order) || {}), options, context]));\n\n  return {\n    isLoading,\n    error,\n    response,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}