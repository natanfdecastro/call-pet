{"ast":null,"code":"import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport uuid from 'uuid/v4';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { pipe, map, filter, reduce, minBy, maxBy, unnest, groupBy, flatten, fromPairs, pluck, mergeDeepLeft, mergeAll, uniq, dropLast, clone, equals, indexBy, prop } from 'ramda';\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nimport fetch from 'cross-fetch';\nimport 'url-search-params-polyfill';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _wrapNativeSuper from '@babel/runtime/helpers/wrapNativeSuper';\n\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$3(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$3(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar moment = extendMoment(Moment);\nvar TIME_SERIES = {\n  day: function day(range) {\n    return Array.from(range.by('day')).map(function (d) {\n      return d.format('YYYY-MM-DDT00:00:00.000');\n    });\n  },\n  month: function month(range) {\n    return Array.from(range.snapTo('month').by('month')).map(function (d) {\n      return d.format('YYYY-MM-01T00:00:00.000');\n    });\n  },\n  year: function year(range) {\n    return Array.from(range.snapTo('year').by('year')).map(function (d) {\n      return d.format('YYYY-01-01T00:00:00.000');\n    });\n  },\n  hour: function hour(range) {\n    return Array.from(range.by('hour')).map(function (d) {\n      return d.format('YYYY-MM-DDTHH:00:00.000');\n    });\n  },\n  minute: function minute(range) {\n    return Array.from(range.by('minute')).map(function (d) {\n      return d.format('YYYY-MM-DDTHH:mm:00.000');\n    });\n  },\n  second: function second(range) {\n    return Array.from(range.by('second')).map(function (d) {\n      return d.format('YYYY-MM-DDTHH:mm:ss.000');\n    });\n  },\n  week: function week(range) {\n    return Array.from(range.snapTo('isoweek').by('week')).map(function (d) {\n      return d.startOf('isoweek').format('YYYY-MM-DDT00:00:00.000');\n    });\n  }\n};\nvar DateRegex = /^\\d\\d\\d\\d-\\d\\d-\\d\\d$/;\nvar LocalDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z?$/;\n\nvar groupByToPairs = function groupByToPairs(keyFn) {\n  var acc = new Map();\n  return function (data) {\n    data.forEach(function (row) {\n      var key = keyFn(row);\n\n      if (!acc.has(key)) {\n        acc.set(key, []);\n      }\n\n      acc.get(key).push(row);\n    });\n    return Array.from(acc.entries());\n  };\n};\n\nvar QUERY_TYPE = {\n  REGULAR_QUERY: 'regularQuery',\n  COMPARE_DATE_RANGE_QUERY: 'compareDateRangeQuery',\n  BLENDING_QUERY: 'blendingQuery'\n};\n\nvar ResultSet = /*#__PURE__*/function () {\n  function ResultSet(loadResponse) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, ResultSet);\n\n    this.loadResponse = loadResponse;\n\n    if (this.loadResponse.queryType != null) {\n      this.queryType = loadResponse.queryType;\n      this.loadResponses = loadResponse.results;\n    } else {\n      this.queryType = QUERY_TYPE.REGULAR_QUERY;\n      this.loadResponse.pivotQuery = _objectSpread$3(_objectSpread$3({}, loadResponse.query), {}, {\n        queryType: this.queryType\n      });\n      this.loadResponses = [loadResponse];\n    }\n\n    if (!Object.values(QUERY_TYPE).includes(this.queryType)) {\n      throw new Error('Unknown query type');\n    }\n\n    this.parseDateMeasures = options.parseDateMeasures;\n    this.options = options;\n    this.backwardCompatibleData = [];\n  }\n\n  _createClass(ResultSet, [{\n    key: \"drillDown\",\n    value: function drillDown(drillDownLocator, pivotConfig) {\n      if (this.queryType === QUERY_TYPE.COMPARE_DATE_RANGE_QUERY) {\n        throw new Error('compareDateRange drillDown query is not currently supported');\n      }\n\n      if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {\n        throw new Error('Data blending drillDown query is not currently supported');\n      }\n\n      var _drillDownLocator$xVa = drillDownLocator.xValues,\n          xValues = _drillDownLocator$xVa === void 0 ? [] : _drillDownLocator$xVa,\n          _drillDownLocator$yVa = drillDownLocator.yValues,\n          yValues = _drillDownLocator$yVa === void 0 ? [] : _drillDownLocator$yVa;\n      var normalizedPivotConfig = this.normalizePivotConfig(pivotConfig);\n      var values = [];\n      normalizedPivotConfig.x.forEach(function (member, currentIndex) {\n        return values.push([member, xValues[currentIndex]]);\n      });\n      normalizedPivotConfig.y.forEach(function (member, currentIndex) {\n        return values.push([member, yValues[currentIndex]]);\n      });\n\n      var _this$query = this.query(),\n          _this$query$filters = _this$query.filters,\n          parentFilters = _this$query$filters === void 0 ? [] : _this$query$filters,\n          _this$query$segments = _this$query.segments,\n          segments = _this$query$segments === void 0 ? [] : _this$query$segments;\n\n      var measures = this.loadResponses[0].annotation.measures;\n\n      var _ref = values.find(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            member = _ref4[0];\n\n        return member === 'measures';\n      }) || [],\n          _ref2 = _slicedToArray(_ref, 2),\n          measureName = _ref2[1];\n\n      if (measureName === undefined) {\n        var _Object$keys = Object.keys(measures);\n\n        var _Object$keys2 = _slicedToArray(_Object$keys, 1);\n\n        measureName = _Object$keys2[0];\n      }\n\n      if (!(measures[measureName] && measures[measureName].drillMembers || []).length) {\n        return null;\n      }\n\n      var filters = [{\n        member: measureName,\n        operator: 'measureFilter'\n      }].concat(_toConsumableArray(parentFilters));\n      var timeDimensions = [];\n      values.filter(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n            member = _ref6[0];\n\n        return member !== 'measures';\n      }).forEach(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            member = _ref8[0],\n            value = _ref8[1];\n\n        var _member$split = member.split('.'),\n            _member$split2 = _slicedToArray(_member$split, 3),\n            cubeName = _member$split2[0],\n            dimension = _member$split2[1],\n            granularity = _member$split2[2];\n\n        if (granularity !== undefined) {\n          var range = moment.range(value, value).snapTo(granularity);\n          timeDimensions.push({\n            dimension: [cubeName, dimension].join('.'),\n            dateRange: [range.start, range.end].map(function (dt) {\n              return dt.format(moment.HTML5_FMT.DATETIME_LOCAL_MS);\n            })\n          });\n        } else if (value == null) {\n          filters.push({\n            member: member,\n            operator: 'notSet'\n          });\n        } else {\n          filters.push({\n            member: member,\n            operator: 'equals',\n            values: [value.toString()]\n          });\n        }\n      });\n      var query = this.loadResponses[0].query;\n\n      if (timeDimensions.length === 0 && query.timeDimensions.length > 0 && query.timeDimensions[0].granularity == null) {\n        timeDimensions.push(query.timeDimensions[0]);\n      }\n\n      return _objectSpread$3(_objectSpread$3(_objectSpread$3({}, measures[measureName].drillMembersGrouped), {}, {\n        filters: filters\n      }, segments.length > 0 ? {\n        segments: segments\n      } : {}), {}, {\n        timeDimensions: timeDimensions,\n        segments: segments,\n        timezone: query.timezone\n      });\n    }\n  }, {\n    key: \"series\",\n    value: function series(pivotConfig) {\n      var _this = this;\n\n      return this.seriesNames(pivotConfig).map(function (_ref9) {\n        var title = _ref9.title,\n            key = _ref9.key;\n        return {\n          title: title,\n          key: key,\n          series: _this.chartPivot(pivotConfig).map(function (_ref10) {\n            var category = _ref10.category,\n                x = _ref10.x,\n                obj = _objectWithoutProperties(_ref10, [\"category\", \"x\"]);\n\n            return {\n              value: obj[key],\n              category: category,\n              x: x\n            };\n          })\n        };\n      });\n    }\n  }, {\n    key: \"axisValues\",\n    value: function axisValues(axis) {\n      var resultIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var query = this.loadResponses[resultIndex].query;\n      return function (row) {\n        var value = function value(measure) {\n          return axis.filter(function (d) {\n            return d !== 'measures';\n          }).map(function (d) {\n            return row[d] != null ? row[d] : null;\n          }).concat(measure ? [measure] : []);\n        };\n\n        if (axis.find(function (d) {\n          return d === 'measures';\n        }) && (query.measures || []).length) {\n          return query.measures.map(value);\n        }\n\n        return [value()];\n      };\n    }\n  }, {\n    key: \"axisValuesString\",\n    value: function axisValuesString(axisValues, delimiter) {\n      var formatValue = function formatValue(v) {\n        if (v == null) {\n          return '∅';\n        } else if (v === '') {\n          return '[Empty string]';\n        } else {\n          return v;\n        }\n      };\n\n      return axisValues.map(formatValue).join(delimiter || ', ');\n    }\n  }, {\n    key: \"normalizePivotConfig\",\n    value: function normalizePivotConfig(pivotConfig) {\n      return ResultSet.getNormalizedPivotConfig(this.loadResponse.pivotQuery, pivotConfig);\n    }\n  }, {\n    key: \"timeSeries\",\n    value: function timeSeries(timeDimension) {\n      if (!timeDimension.granularity) {\n        return null;\n      }\n\n      var dateRange = timeDimension.dateRange;\n\n      if (!dateRange) {\n        var dates = pipe(map(function (row) {\n          return row[ResultSet.timeDimensionMember(timeDimension)] && moment(row[ResultSet.timeDimensionMember(timeDimension)]);\n        }), filter(function (r) {\n          return !!r;\n        }))(this.timeDimensionBackwardCompatibleData());\n        dateRange = dates.length && [reduce(minBy(function (d) {\n          return d.toDate();\n        }), dates[0], dates), reduce(maxBy(function (d) {\n          return d.toDate();\n        }), dates[0], dates)] || null;\n      }\n\n      if (!dateRange) {\n        return null;\n      }\n\n      var padToDay = timeDimension.dateRange ? timeDimension.dateRange.find(function (d) {\n        return d.match(DateRegex);\n      }) : !['hour', 'minute', 'second'].includes(timeDimension.granularity);\n\n      var _dateRange = dateRange,\n          _dateRange2 = _slicedToArray(_dateRange, 2),\n          start = _dateRange2[0],\n          end = _dateRange2[1];\n\n      var range = moment.range(start, end);\n\n      if (!TIME_SERIES[timeDimension.granularity]) {\n        throw new Error(\"Unsupported time granularity: \".concat(timeDimension.granularity));\n      }\n\n      return TIME_SERIES[timeDimension.granularity](padToDay ? range.snapTo('day') : range);\n    }\n  }, {\n    key: \"pivot\",\n    value: function pivot(pivotConfig) {\n      var _this2 = this;\n\n      pivotConfig = this.normalizePivotConfig(pivotConfig);\n      var query = this.loadResponse.pivotQuery;\n\n      var pivotImpl = function pivotImpl() {\n        var resultIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var groupByXAxis = groupByToPairs(function (_ref11) {\n          var xValues = _ref11.xValues;\n          return _this2.axisValuesString(xValues);\n        });\n\n        var measureValue = function measureValue(row, measure) {\n          return row[measure];\n        };\n\n        if (pivotConfig.fillMissingDates && pivotConfig.x.length === 1 && equals(pivotConfig.x, (query.timeDimensions || []).filter(function (td) {\n          return !!td.granularity;\n        }).map(function (td) {\n          return ResultSet.timeDimensionMember(td);\n        }))) {\n          var series = _this2.loadResponses.map(function (loadResponse) {\n            return _this2.timeSeries(loadResponse.query.timeDimensions[0]);\n          });\n\n          if (series[0]) {\n            groupByXAxis = function groupByXAxis(rows) {\n              var byXValues = groupBy(function (_ref12) {\n                var xValues = _ref12.xValues;\n                return moment(xValues[0]).format(moment.HTML5_FMT.DATETIME_LOCAL_MS);\n              }, rows);\n              return series[resultIndex].map(function (d) {\n                return [d, byXValues[d] || [{\n                  xValues: [d],\n                  row: {}\n                }]];\n              });\n            };\n\n            measureValue = function measureValue(row, measure) {\n              return row[measure] || 0;\n            };\n          }\n        }\n\n        var xGrouped = pipe(map(function (row) {\n          return _this2.axisValues(pivotConfig.x, resultIndex)(row).map(function (xValues) {\n            return {\n              xValues: xValues,\n              row: row\n            };\n          });\n        }), unnest, groupByXAxis)(_this2.timeDimensionBackwardCompatibleData(resultIndex));\n        var allYValues = pipe(map(function (_ref13) {\n          var _ref14 = _slicedToArray(_ref13, 2),\n              rows = _ref14[1];\n\n          return unnest( // collect Y values only from filled rows\n          rows.filter(function (_ref15) {\n            var row = _ref15.row;\n            return Object.keys(row).length > 0;\n          }).map(function (_ref16) {\n            var row = _ref16.row;\n            return _this2.axisValues(pivotConfig.y, resultIndex)(row);\n          }));\n        }), unnest, uniq)(xGrouped);\n        return xGrouped.map(function (_ref17) {\n          var _ref18 = _slicedToArray(_ref17, 2),\n              rows = _ref18[1];\n\n          var xValues = rows[0].xValues;\n          var yGrouped = pipe(map(function (_ref19) {\n            var row = _ref19.row;\n            return _this2.axisValues(pivotConfig.y, resultIndex)(row).map(function (yValues) {\n              return {\n                yValues: yValues,\n                row: row\n              };\n            });\n          }), unnest, groupBy(function (_ref20) {\n            var yValues = _ref20.yValues;\n            return _this2.axisValuesString(yValues);\n          }))(rows);\n          return {\n            xValues: xValues,\n            yValuesArray: unnest(allYValues.map(function (yValues) {\n              var measure = pivotConfig.x.find(function (d) {\n                return d === 'measures';\n              }) ? ResultSet.measureFromAxis(xValues) : ResultSet.measureFromAxis(yValues);\n              return (yGrouped[_this2.axisValuesString(yValues)] || [{\n                row: {}\n              }]).map(function (_ref21) {\n                var row = _ref21.row;\n                return [yValues, measureValue(row, measure)];\n              });\n            }))\n          };\n        });\n      };\n\n      var pivots = this.loadResponses.length > 1 ? this.loadResponses.map(function (_, index) {\n        return pivotImpl(index);\n      }) : [];\n      return pivots.length ? this.mergePivots(pivots, pivotConfig.joinDateRange) : pivotImpl();\n    }\n  }, {\n    key: \"mergePivots\",\n    value: function mergePivots(pivots, joinDateRange) {\n      var minLengthPivot = pivots.reduce(function (memo, current) {\n        return memo != null && current.length >= memo.length ? memo : current;\n      }, null);\n      return minLengthPivot.map(function (_, index) {\n        var xValues = joinDateRange ? [pivots.map(function (pivot) {\n          return pivot[index] && pivot[index].xValues || [];\n        }).join(', ')] : minLengthPivot[index].xValues;\n        return {\n          xValues: xValues,\n          yValuesArray: unnest(pivots.map(function (pivot) {\n            return pivot[index].yValuesArray;\n          }))\n        };\n      });\n    }\n  }, {\n    key: \"pivotedRows\",\n    value: function pivotedRows(pivotConfig) {\n      // TODO\n      return this.chartPivot(pivotConfig);\n    }\n  }, {\n    key: \"chartPivot\",\n    value: function chartPivot(pivotConfig) {\n      var _this3 = this;\n\n      var validate = function validate(value) {\n        if (_this3.parseDateMeasures && LocalDateRegex.test(value)) {\n          return new Date(value);\n        } else if (!Number.isNaN(Number.parseFloat(value))) {\n          return Number.parseFloat(value);\n        }\n\n        return value;\n      };\n\n      var duplicateMeasures = new Set();\n\n      if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {\n        var allMeasures = flatten(this.loadResponses.map(function (_ref22) {\n          var query = _ref22.query;\n          return query.measures;\n        }));\n        allMeasures.filter(function (e, i, a) {\n          return a.indexOf(e) !== i;\n        }).forEach(function (m) {\n          return duplicateMeasures.add(m);\n        });\n      }\n\n      var aliasSeries = function aliasSeries(yValues, i) {\n        // manual alias\n        if (pivotConfig && pivotConfig.aliasSeries && pivotConfig.aliasSeries[i]) {\n          return [pivotConfig.aliasSeries[i]].concat(_toConsumableArray(yValues));\n        } else if (duplicateMeasures.has(yValues[0])) {\n          return [i].concat(_toConsumableArray(yValues));\n        }\n\n        return [yValues];\n      };\n\n      return this.pivot(pivotConfig).map(function (_ref23) {\n        var xValues = _ref23.xValues,\n            yValuesArray = _ref23.yValuesArray;\n        return _objectSpread$3({\n          category: _this3.axisValuesString(xValues, ','),\n          // TODO deprecated\n          x: _this3.axisValuesString(xValues, ','),\n          xValues: xValues\n        }, yValuesArray.map(function (_ref24, i) {\n          var _ref25 = _slicedToArray(_ref24, 2),\n              yValues = _ref25[0],\n              m = _ref25[1];\n\n          return _defineProperty({}, _this3.axisValuesString(aliasSeries(yValues, i), ','), m && validate(m));\n        }).reduce(function (a, b) {\n          return Object.assign(a, b);\n        }, {}));\n      });\n    }\n  }, {\n    key: \"tablePivot\",\n    value: function tablePivot(pivotConfig) {\n      var normalizedPivotConfig = this.normalizePivotConfig(pivotConfig || {});\n      var isMeasuresPresent = normalizedPivotConfig.x.concat(normalizedPivotConfig.y).includes('measures');\n      return this.pivot(normalizedPivotConfig).map(function (_ref27) {\n        var xValues = _ref27.xValues,\n            yValuesArray = _ref27.yValuesArray;\n        return fromPairs(normalizedPivotConfig.x.map(function (key, index) {\n          return [key, xValues[index]];\n        }).concat(isMeasuresPresent ? yValuesArray.map(function (_ref28) {\n          var _ref29 = _slicedToArray(_ref28, 2),\n              yValues = _ref29[0],\n              measure = _ref29[1];\n\n          return [yValues.length ? yValues.join() : 'value', measure];\n        }) : []));\n      });\n    }\n  }, {\n    key: \"tableColumns\",\n    value: function tableColumns(pivotConfig) {\n      var normalizedPivotConfig = this.normalizePivotConfig(pivotConfig || {});\n      var annotations = pipe(pluck('annotation'), reduce(mergeDeepLeft(), {}))(this.loadResponses);\n      var flatMeta = Object.values(annotations).reduce(function (a, b) {\n        return _objectSpread$3(_objectSpread$3({}, a), b);\n      }, {});\n      var schema = {};\n\n      var extractFields = function extractFields(key) {\n        var _ref30 = flatMeta[key] || {},\n            title = _ref30.title,\n            shortTitle = _ref30.shortTitle,\n            type = _ref30.type,\n            format = _ref30.format,\n            meta = _ref30.meta;\n\n        return {\n          key: key,\n          title: title,\n          shortTitle: shortTitle,\n          type: type,\n          format: format,\n          meta: meta\n        };\n      };\n\n      var pivot = this.pivot(normalizedPivotConfig);\n      (pivot[0] && pivot[0].yValuesArray || []).forEach(function (_ref31) {\n        var _ref32 = _slicedToArray(_ref31, 1),\n            yValues = _ref32[0];\n\n        if (yValues.length > 0) {\n          var currentItem = schema;\n          yValues.forEach(function (value, index) {\n            currentItem[value] = {\n              key: value,\n              memberId: normalizedPivotConfig.y[index] === 'measures' ? value : normalizedPivotConfig.y[index],\n              children: currentItem[value] && currentItem[value].children || {}\n            };\n            currentItem = currentItem[value].children;\n          });\n        }\n      });\n\n      var toColumns = function toColumns() {\n        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n        if (Object.keys(item).length === 0) {\n          return [];\n        }\n\n        return Object.values(item).map(function (_ref33) {\n          var key = _ref33.key,\n              currentItem = _objectWithoutProperties(_ref33, [\"key\"]);\n\n          var children = toColumns(currentItem.children, [].concat(_toConsumableArray(path), [key]));\n\n          var _extractFields = extractFields(currentItem.memberId),\n              title = _extractFields.title,\n              shortTitle = _extractFields.shortTitle,\n              fields = _objectWithoutProperties(_extractFields, [\"title\", \"shortTitle\"]);\n\n          var dimensionValue = key !== currentItem.memberId || title == null ? key : '';\n\n          if (!children.length) {\n            return _objectSpread$3(_objectSpread$3({}, fields), {}, {\n              key: key,\n              dataIndex: [].concat(_toConsumableArray(path), [key]).join(),\n              title: [title, dimensionValue].join(' ').trim(),\n              shortTitle: dimensionValue || shortTitle\n            });\n          }\n\n          return _objectSpread$3(_objectSpread$3({}, fields), {}, {\n            key: key,\n            title: [title, dimensionValue].join(' ').trim(),\n            shortTitle: dimensionValue || shortTitle,\n            children: children\n          });\n        });\n      };\n\n      var otherColumns = [];\n\n      if (!pivot.length && normalizedPivotConfig.y.includes('measures')) {\n        otherColumns = (this.loadResponses[0].query.measures || []).map(function (key) {\n          return _objectSpread$3(_objectSpread$3({}, extractFields(key)), {}, {\n            dataIndex: key\n          });\n        });\n      } // Syntatic column to display the measure value\n\n\n      if (!normalizedPivotConfig.y.length && normalizedPivotConfig.x.includes('measures')) {\n        otherColumns.push({\n          key: 'value',\n          dataIndex: 'value',\n          title: 'Value',\n          shortTitle: 'Value',\n          type: 'string'\n        });\n      }\n\n      return normalizedPivotConfig.x.map(function (key) {\n        if (key === 'measures') {\n          return {\n            key: 'measures',\n            dataIndex: 'measures',\n            title: 'Measures',\n            shortTitle: 'Measures',\n            type: 'string'\n          };\n        }\n\n        return _objectSpread$3(_objectSpread$3({}, extractFields(key)), {}, {\n          dataIndex: key\n        });\n      }).concat(toColumns(schema)).concat(otherColumns);\n    }\n  }, {\n    key: \"totalRow\",\n    value: function totalRow(pivotConfig) {\n      return this.chartPivot(pivotConfig)[0];\n    }\n  }, {\n    key: \"categories\",\n    value: function categories(pivotConfig) {\n      // TODO\n      return this.chartPivot(pivotConfig);\n    }\n  }, {\n    key: \"seriesNames\",\n    value: function seriesNames(pivotConfig) {\n      var _this4 = this;\n\n      pivotConfig = this.normalizePivotConfig(pivotConfig);\n      var measures = pipe(pluck('annotation'), pluck('measures'), mergeAll)(this.loadResponses);\n      var seriesNames = unnest(this.loadResponses.map(function (_, index) {\n        return pipe(map(_this4.axisValues(pivotConfig.y, index)), unnest, uniq)(_this4.timeDimensionBackwardCompatibleData(index));\n      }));\n      var duplicateMeasures = new Set();\n\n      if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {\n        var allMeasures = flatten(this.loadResponses.map(function (_ref34) {\n          var query = _ref34.query;\n          return query.measures;\n        }));\n        allMeasures.filter(function (e, i, a) {\n          return a.indexOf(e) !== i;\n        }).forEach(function (m) {\n          return duplicateMeasures.add(m);\n        });\n      }\n\n      var aliasSeries = function aliasSeries(yValues, i) {\n        if (pivotConfig && pivotConfig.aliasSeries && pivotConfig.aliasSeries[i]) {\n          return [pivotConfig.aliasSeries[i]].concat(_toConsumableArray(yValues));\n        } else if (duplicateMeasures.has(yValues[0])) {\n          return [i].concat(_toConsumableArray(yValues));\n        }\n\n        return yValues;\n      };\n\n      return seriesNames.map(function (axisValues, i) {\n        var aliasedAxis = aliasSeries(axisValues, i);\n        return {\n          title: _this4.axisValuesString(pivotConfig.y.find(function (d) {\n            return d === 'measures';\n          }) ? dropLast(1, aliasedAxis).concat(measures[ResultSet.measureFromAxis(axisValues)].title) : aliasedAxis, ', '),\n          key: _this4.axisValuesString(aliasedAxis, ','),\n          yValues: axisValues\n        };\n      });\n    }\n  }, {\n    key: \"query\",\n    value: function query() {\n      if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {\n        throw new Error(\"Method is not supported for a '\".concat(this.queryType, \"' query type. Please use decompose\"));\n      }\n\n      return this.loadResponses[0].query;\n    }\n  }, {\n    key: \"pivotQuery\",\n    value: function pivotQuery() {\n      return this.loadResponse.pivotQuery || null;\n    }\n  }, {\n    key: \"rawData\",\n    value: function rawData() {\n      if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {\n        throw new Error(\"Method is not supported for a '\".concat(this.queryType, \"' query type. Please use decompose\"));\n      }\n\n      return this.loadResponses[0].data;\n    }\n  }, {\n    key: \"annotation\",\n    value: function annotation() {\n      if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {\n        throw new Error(\"Method is not supported for a '\".concat(this.queryType, \"' query type. Please use decompose\"));\n      }\n\n      return this.loadResponses[0].annotation;\n    }\n  }, {\n    key: \"timeDimensionBackwardCompatibleData\",\n    value: function timeDimensionBackwardCompatibleData() {\n      var resultIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (!this.backwardCompatibleData[resultIndex]) {\n        var _this$loadResponses$r = this.loadResponses[resultIndex],\n            data = _this$loadResponses$r.data,\n            query = _this$loadResponses$r.query;\n        var timeDimensions = (query.timeDimensions || []).filter(function (td) {\n          return !!td.granularity;\n        });\n        this.backwardCompatibleData[resultIndex] = data.map(function (row) {\n          return _objectSpread$3(_objectSpread$3({}, row), fromPairs(Object.keys(row).filter(function (field) {\n            return timeDimensions.find(function (d) {\n              return d.dimension === field;\n            }) && !row[ResultSet.timeDimensionMember(timeDimensions.find(function (d) {\n              return d.dimension === field;\n            }))];\n          }).map(function (field) {\n            return [ResultSet.timeDimensionMember(timeDimensions.find(function (d) {\n              return d.dimension === field;\n            })), row[field]];\n          })));\n        });\n      }\n\n      return this.backwardCompatibleData[resultIndex];\n    }\n  }, {\n    key: \"decompose\",\n    value: function decompose() {\n      var _this5 = this;\n\n      return this.loadResponses.map(function (result) {\n        return new ResultSet({\n          queryType: QUERY_TYPE.REGULAR_QUERY,\n          pivotQuery: _objectSpread$3(_objectSpread$3({}, result.query), {}, {\n            queryType: QUERY_TYPE.REGULAR_QUERY\n          }),\n          results: [result]\n        }, _this5.options);\n      });\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return {\n        loadResponse: clone(this.loadResponse)\n      };\n    }\n  }], [{\n    key: \"measureFromAxis\",\n    value: function measureFromAxis(axisValues) {\n      return axisValues[axisValues.length - 1];\n    }\n  }, {\n    key: \"timeDimensionMember\",\n    value: function timeDimensionMember(td) {\n      return \"\".concat(td.dimension, \".\").concat(td.granularity);\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new ResultSet(data.loadResponse, options);\n    }\n  }, {\n    key: \"getNormalizedPivotConfig\",\n    value: function getNormalizedPivotConfig(query) {\n      var pivotConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var defaultPivotConfig = {\n        x: [],\n        y: [],\n        fillMissingDates: true,\n        joinDateRange: false\n      };\n      var _query$measures = query.measures,\n          measures = _query$measures === void 0 ? [] : _query$measures,\n          _query$dimensions = query.dimensions,\n          dimensions = _query$dimensions === void 0 ? [] : _query$dimensions;\n      var timeDimensions = (query.timeDimensions || []).filter(function (td) {\n        return !!td.granularity;\n      });\n      pivotConfig = pivotConfig || (timeDimensions.length ? {\n        x: timeDimensions.map(function (td) {\n          return ResultSet.timeDimensionMember(td);\n        }),\n        y: dimensions\n      } : {\n        x: dimensions,\n        y: []\n      });\n      pivotConfig = mergeDeepLeft(pivotConfig, defaultPivotConfig);\n\n      var substituteTimeDimensionMembers = function substituteTimeDimensionMembers(axis) {\n        return axis.map(function (subDim) {\n          return timeDimensions.find(function (td) {\n            return td.dimension === subDim;\n          }) && !dimensions.find(function (d) {\n            return d === subDim;\n          }) ? ResultSet.timeDimensionMember(query.timeDimensions.find(function (td) {\n            return td.dimension === subDim;\n          })) : subDim;\n        });\n      };\n\n      pivotConfig.x = substituteTimeDimensionMembers(pivotConfig.x);\n      pivotConfig.y = substituteTimeDimensionMembers(pivotConfig.y);\n      var allIncludedDimensions = pivotConfig.x.concat(pivotConfig.y);\n      var allDimensions = timeDimensions.map(function (td) {\n        return ResultSet.timeDimensionMember(td);\n      }).concat(dimensions);\n\n      var dimensionFilter = function dimensionFilter(key) {\n        return allDimensions.includes(key) || key === 'measures';\n      };\n\n      pivotConfig.x = pivotConfig.x.concat(allDimensions.filter(function (d) {\n        return !allIncludedDimensions.includes(d);\n      })).filter(dimensionFilter);\n      pivotConfig.y = pivotConfig.y.filter(dimensionFilter);\n\n      if (!pivotConfig.x.concat(pivotConfig.y).find(function (d) {\n        return d === 'measures';\n      })) {\n        pivotConfig.y.push('measures');\n      }\n\n      if (!measures.length) {\n        pivotConfig.x = pivotConfig.x.filter(function (d) {\n          return d !== 'measures';\n        });\n        pivotConfig.y = pivotConfig.y.filter(function (d) {\n          return d !== 'measures';\n        });\n      }\n\n      return pivotConfig;\n    }\n  }]);\n\n  return ResultSet;\n}();\n\nvar SqlQuery = /*#__PURE__*/function () {\n  function SqlQuery(sqlQuery) {\n    _classCallCheck(this, SqlQuery);\n\n    this.sqlQuery = sqlQuery;\n  }\n\n  _createClass(SqlQuery, [{\n    key: \"rawQuery\",\n    value: function rawQuery() {\n      return this.sqlQuery.sql;\n    }\n  }, {\n    key: \"sql\",\n    value: function sql() {\n      return this.rawQuery().sql[0];\n    }\n  }]);\n\n  return SqlQuery;\n}();\n\nvar memberMap = function memberMap(memberArray) {\n  return fromPairs(memberArray.map(function (m) {\n    return [m.name, m];\n  }));\n};\n\nvar operators = {\n  string: [{\n    name: 'contains',\n    title: 'contains'\n  }, {\n    name: 'notContains',\n    title: 'does not contain'\n  }, {\n    name: 'equals',\n    title: 'equals'\n  }, {\n    name: 'notEquals',\n    title: 'does not equal'\n  }, {\n    name: 'set',\n    title: 'is set'\n  }, {\n    name: 'notSet',\n    title: 'is not set'\n  }],\n  number: [{\n    name: 'equals',\n    title: 'equals'\n  }, {\n    name: 'notEquals',\n    title: 'does not equal'\n  }, {\n    name: 'set',\n    title: 'is set'\n  }, {\n    name: 'notSet',\n    title: 'is not set'\n  }, {\n    name: 'gt',\n    title: '>'\n  }, {\n    name: 'gte',\n    title: '>='\n  }, {\n    name: 'lt',\n    title: '<'\n  }, {\n    name: 'lte',\n    title: '<='\n  }]\n};\n/**\n * Contains information about available cubes and it's members.\n */\n\nvar Meta = /*#__PURE__*/function () {\n  function Meta(metaResponse) {\n    _classCallCheck(this, Meta);\n\n    this.meta = metaResponse;\n    var cubes = this.meta.cubes;\n    this.cubes = cubes;\n    this.cubesMap = fromPairs(cubes.map(function (c) {\n      return [c.name, {\n        measures: memberMap(c.measures),\n        dimensions: memberMap(c.dimensions),\n        segments: memberMap(c.segments)\n      }];\n    }));\n  }\n\n  _createClass(Meta, [{\n    key: \"membersForQuery\",\n    value: function membersForQuery(query, memberType) {\n      return unnest(this.cubes.map(function (c) {\n        return c[memberType];\n      }));\n    }\n  }, {\n    key: \"resolveMember\",\n    value: function resolveMember(memberName, memberType) {\n      var _this = this;\n\n      var _memberName$split = memberName.split('.'),\n          _memberName$split2 = _slicedToArray(_memberName$split, 1),\n          cube = _memberName$split2[0];\n\n      if (!this.cubesMap[cube]) {\n        return {\n          title: memberName,\n          error: \"Cube not found \".concat(cube, \" for path '\").concat(memberName, \"'\")\n        };\n      }\n\n      var memberTypes = Array.isArray(memberType) ? memberType : [memberType];\n      var member = memberTypes.map(function (type) {\n        return _this.cubesMap[cube][type] && _this.cubesMap[cube][type][memberName];\n      }).find(function (m) {\n        return m;\n      });\n\n      if (!member) {\n        return {\n          title: memberName,\n          error: \"Path not found '\".concat(memberName, \"'\")\n        };\n      }\n\n      return member;\n    }\n  }, {\n    key: \"defaultTimeDimensionNameFor\",\n    value: function defaultTimeDimensionNameFor(memberName) {\n      var _this2 = this;\n\n      var _memberName$split3 = memberName.split('.'),\n          _memberName$split4 = _slicedToArray(_memberName$split3, 1),\n          cube = _memberName$split4[0];\n\n      if (!this.cubesMap[cube]) {\n        return null;\n      }\n\n      return Object.keys(this.cubesMap[cube].dimensions || {}).find(function (d) {\n        return _this2.cubesMap[cube].dimensions[d].type === 'time';\n      });\n    }\n  }, {\n    key: \"filterOperatorsForMember\",\n    value: function filterOperatorsForMember(memberName, memberType) {\n      var member = this.resolveMember(memberName, memberType);\n      return operators[member.type] || operators.string;\n    }\n  }]);\n\n  return Meta;\n}();\n\nvar ProgressResult = /*#__PURE__*/function () {\n  function ProgressResult(progressResponse) {\n    _classCallCheck(this, ProgressResult);\n\n    this.progressResponse = progressResponse;\n  }\n\n  _createClass(ProgressResult, [{\n    key: \"stage\",\n    value: function stage() {\n      return this.progressResponse.stage;\n    }\n  }, {\n    key: \"timeElapsed\",\n    value: function timeElapsed() {\n      return this.progressResponse.timeElapsed;\n    }\n  }]);\n\n  return ProgressResult;\n}();\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$2(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar HttpTransport = /*#__PURE__*/function () {\n  function HttpTransport(_ref) {\n    var authorization = _ref.authorization,\n        apiUrl = _ref.apiUrl,\n        method = _ref.method,\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        credentials = _ref.credentials;\n\n    _classCallCheck(this, HttpTransport);\n\n    this.authorization = authorization;\n    this.apiUrl = apiUrl;\n    this.method = method;\n    this.headers = headers;\n    this.credentials = credentials;\n  }\n\n  _createClass(HttpTransport, [{\n    key: \"request\",\n    value: function request(method, _ref2) {\n      var _this = this;\n\n      var baseRequestId = _ref2.baseRequestId,\n          params = _objectWithoutProperties(_ref2, [\"baseRequestId\"]);\n\n      var spanCounter = 1;\n      var searchParams = new URLSearchParams(params && Object.keys(params).map(function (k) {\n        return _defineProperty({}, k, _typeof(params[k]) === 'object' ? JSON.stringify(params[k]) : params[k]);\n      }).reduce(function (a, b) {\n        return _objectSpread$2(_objectSpread$2({}, a), b);\n      }, {}));\n      var url = \"\".concat(this.apiUrl, \"/\").concat(method).concat(searchParams.toString().length ? \"?\".concat(searchParams) : '');\n      this.method = this.method || (url.length < 2000 ? 'GET' : 'POST');\n\n      if (this.method === 'POST') {\n        url = \"\".concat(this.apiUrl, \"/\").concat(method);\n        this.headers['Content-Type'] = 'application/json';\n      } // Currently, all methods make GET requests. If a method makes a request with a body payload,\n      // remember to add {'Content-Type': 'application/json'} to the header.\n\n\n      var runRequest = function runRequest() {\n        return fetch(url, {\n          method: _this.method,\n          headers: _objectSpread$2({\n            Authorization: _this.authorization,\n            'x-request-id': baseRequestId && \"\".concat(baseRequestId, \"-span-\").concat(spanCounter++)\n          }, _this.headers),\n          credentials: _this.credentials,\n          body: _this.method === 'POST' ? JSON.stringify(params) : null\n        });\n      };\n\n      return {\n        subscribe: function subscribe(callback) {\n          var _this2 = this;\n\n          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return runRequest();\n\n                  case 2:\n                    result = _context.sent;\n                    return _context.abrupt(\"return\", callback(result, function () {\n                      return _this2.subscribe(callback);\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }))();\n        }\n      };\n    }\n  }]);\n\n  return HttpTransport;\n}();\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar RequestError = /*#__PURE__*/function (_Error) {\n  _inherits(RequestError, _Error);\n\n  var _super = _createSuper(RequestError);\n\n  function RequestError(message, response) {\n    var _this;\n\n    _classCallCheck(this, RequestError);\n\n    _this = _super.call(this, message);\n    _this.response = response;\n    return _this;\n  }\n\n  return RequestError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar DEFAULT_GRANULARITY = 'day';\nvar GRANULARITIES = [{\n  name: undefined,\n  title: 'w/o grouping'\n}, {\n  name: 'second',\n  title: 'Second'\n}, {\n  name: 'minute',\n  title: 'Minute'\n}, {\n  name: 'hour',\n  title: 'Hour'\n}, {\n  name: 'day',\n  title: 'Day'\n}, {\n  name: 'week',\n  title: 'Week'\n}, {\n  name: 'month',\n  title: 'Month'\n}, {\n  name: 'year',\n  title: 'Year'\n}];\n\nfunction areQueriesEqual() {\n  var query1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var query2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return equals(Object.entries(query1 && query1.order || {}), Object.entries(query2 && query2.order || {})) && equals(query1, query2);\n}\n\nfunction defaultOrder(query) {\n  var granularity = (query.timeDimensions || []).find(function (d) {\n    return d.granularity;\n  });\n\n  if (granularity) {\n    return _defineProperty({}, granularity.dimension, 'asc');\n  } else if ((query.measures || []).length > 0 && (query.dimensions || []).length > 0) {\n    return _defineProperty({}, query.measures[0], 'desc');\n  } else if ((query.dimensions || []).length > 0) {\n    return _defineProperty({}, query.dimensions[0], 'asc');\n  }\n\n  return {};\n}\n\nfunction defaultHeuristics(newState) {\n  var oldQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _clone = clone(newState),\n      query = _clone.query,\n      props = _objectWithoutProperties(_clone, [\"query\"]);\n\n  var meta = options.meta,\n      sessionGranularity = options.sessionGranularity;\n  var granularity = sessionGranularity || DEFAULT_GRANULARITY;\n\n  var state = _objectSpread$1({\n    query: query\n  }, props);\n\n  var newQuery = null;\n\n  if (!areQueriesEqual(query, oldQuery)) {\n    newQuery = query;\n  }\n\n  if (Array.isArray(newQuery) || Array.isArray(oldQuery)) {\n    return newState;\n  }\n\n  if (newQuery) {\n    if ((oldQuery.timeDimensions || []).length === 1 && (newQuery.timeDimensions || []).length === 1 && newQuery.timeDimensions[0].granularity && oldQuery.timeDimensions[0].granularity !== newQuery.timeDimensions[0].granularity) {\n      state = _objectSpread$1(_objectSpread$1({}, state), {}, {\n        sessionGranularity: newQuery.timeDimensions[0].granularity\n      });\n    }\n\n    if ((oldQuery.measures || []).length === 0 && (newQuery.measures || []).length > 0 || (oldQuery.measures || []).length === 1 && (newQuery.measures || []).length === 1 && oldQuery.measures[0] !== newQuery.measures[0]) {\n      var _ref4 = newQuery.timeDimensions || [],\n          _ref5 = _slicedToArray(_ref4, 1),\n          td = _ref5[0];\n\n      var defaultTimeDimension = meta.defaultTimeDimensionNameFor(newQuery.measures[0]);\n      newQuery = _objectSpread$1(_objectSpread$1({}, newQuery), {}, {\n        timeDimensions: defaultTimeDimension ? [{\n          dimension: defaultTimeDimension,\n          granularity: td && td.granularity || granularity,\n          dateRange: td && td.dateRange\n        }] : []\n      });\n      return _objectSpread$1(_objectSpread$1({}, state), {}, {\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        chartType: defaultTimeDimension ? 'line' : 'number'\n      });\n    }\n\n    if ((oldQuery.dimensions || []).length === 0 && (newQuery.dimensions || []).length > 0) {\n      newQuery = _objectSpread$1(_objectSpread$1({}, newQuery), {}, {\n        timeDimensions: (newQuery.timeDimensions || []).map(function (td) {\n          return _objectSpread$1(_objectSpread$1({}, td), {}, {\n            granularity: undefined\n          });\n        })\n      });\n      return _objectSpread$1(_objectSpread$1({}, state), {}, {\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        chartType: 'table'\n      });\n    }\n\n    if ((oldQuery.dimensions || []).length > 0 && (newQuery.dimensions || []).length === 0) {\n      newQuery = _objectSpread$1(_objectSpread$1({}, newQuery), {}, {\n        timeDimensions: (newQuery.timeDimensions || []).map(function (td) {\n          return _objectSpread$1(_objectSpread$1({}, td), {}, {\n            granularity: td.granularity || granularity\n          });\n        })\n      });\n      return _objectSpread$1(_objectSpread$1({}, state), {}, {\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        chartType: (newQuery.timeDimensions || []).length ? 'line' : 'number'\n      });\n    }\n\n    if (((oldQuery.dimensions || []).length > 0 || (oldQuery.measures || []).length > 0) && (newQuery.dimensions || []).length === 0 && (newQuery.measures || []).length === 0) {\n      newQuery = _objectSpread$1(_objectSpread$1({}, newQuery), {}, {\n        timeDimensions: [],\n        filters: []\n      });\n      return _objectSpread$1(_objectSpread$1({}, state), {}, {\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        sessionGranularity: null\n      });\n    }\n\n    return state;\n  }\n\n  if (state.chartType) {\n    var newChartType = state.chartType;\n\n    if ((newChartType === 'line' || newChartType === 'area') && (oldQuery.timeDimensions || []).length === 1 && !oldQuery.timeDimensions[0].granularity) {\n      var _oldQuery$timeDimensi = _slicedToArray(oldQuery.timeDimensions, 1),\n          _td = _oldQuery$timeDimensi[0];\n\n      return _objectSpread$1(_objectSpread$1({}, state), {}, {\n        pivotConfig: null,\n        query: _objectSpread$1(_objectSpread$1({}, oldQuery), {}, {\n          timeDimensions: [_objectSpread$1(_objectSpread$1({}, _td), {}, {\n            granularity: granularity\n          })]\n        })\n      });\n    }\n\n    if ((newChartType === 'pie' || newChartType === 'table' || newChartType === 'number') && (oldQuery.timeDimensions || []).length === 1 && oldQuery.timeDimensions[0].granularity) {\n      var _oldQuery$timeDimensi2 = _slicedToArray(oldQuery.timeDimensions, 1),\n          _td2 = _oldQuery$timeDimensi2[0];\n\n      return _objectSpread$1(_objectSpread$1({}, state), {}, {\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: _objectSpread$1(_objectSpread$1({}, oldQuery), {}, {\n          timeDimensions: [_objectSpread$1(_objectSpread$1({}, _td2), {}, {\n            granularity: undefined\n          })]\n        })\n      });\n    }\n  }\n\n  return state;\n}\n\nfunction isQueryPresent(query) {\n  if (!query) {\n    return false;\n  }\n\n  return (Array.isArray(query) ? query : [query]).every(function (q) {\n    return q.measures && q.measures.length || q.dimensions && q.dimensions.length || q.timeDimensions && q.timeDimensions.length;\n  });\n}\n\nfunction movePivotItem(pivotConfig, sourceIndex, destinationIndex, sourceAxis, destinationAxis) {\n  var nextPivotConfig = _objectSpread$1(_objectSpread$1({}, pivotConfig), {}, {\n    x: _toConsumableArray(pivotConfig.x),\n    y: _toConsumableArray(pivotConfig.y)\n  });\n\n  var id = pivotConfig[sourceAxis][sourceIndex];\n  var lastIndex = nextPivotConfig[destinationAxis].length - 1;\n\n  if (id === 'measures') {\n    destinationIndex = lastIndex + 1;\n  } else if (destinationIndex >= lastIndex && nextPivotConfig[destinationAxis][lastIndex] === 'measures') {\n    destinationIndex = lastIndex - 1;\n  }\n\n  nextPivotConfig[sourceAxis].splice(sourceIndex, 1);\n  nextPivotConfig[destinationAxis].splice(destinationIndex, 0, id);\n  return nextPivotConfig;\n}\n\nfunction moveItemInArray(list, sourceIndex, destinationIndex) {\n  var result = _toConsumableArray(list);\n\n  var _result$splice = result.splice(sourceIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(destinationIndex, 0, removed);\n  return result;\n}\n\nfunction flattenFilters() {\n  var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return filters.reduce(function (memo, filter) {\n    if (filter.or || filter.and) {\n      return [].concat(_toConsumableArray(memo), _toConsumableArray(flattenFilters(filter.or || filter.and)));\n    }\n\n    return [].concat(_toConsumableArray(memo), [filter]);\n  }, []);\n}\n\nfunction getQueryMembers() {\n  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var keys = ['measures', 'dimensions', 'segments'];\n  var members = new Set();\n  keys.forEach(function (key) {\n    return (query[key] || []).forEach(function (member) {\n      return members.add(member);\n    });\n  });\n  (query.timeDimensions || []).forEach(function (td) {\n    return members.add(td.dimension);\n  });\n  flattenFilters(query.filters).forEach(function (filter) {\n    return members.add(filter.dimension || filter.member);\n  });\n  return _toConsumableArray(members);\n}\n\nfunction getOrderMembersFromOrder(orderMembers, order) {\n  var ids = new Set();\n  var indexedOrderMembers = indexBy(prop('id'), orderMembers);\n  var entries = Array.isArray(order) ? order : Object.entries(order || {});\n  var nextOrderMembers = [];\n  entries.forEach(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n        memberId = _ref7[0],\n        currentOrder = _ref7[1];\n\n    if (currentOrder !== 'none' && indexedOrderMembers[memberId]) {\n      ids.add(memberId);\n      nextOrderMembers.push(_objectSpread$1(_objectSpread$1({}, indexedOrderMembers[memberId]), {}, {\n        order: currentOrder\n      }));\n    }\n  });\n  orderMembers.forEach(function (member) {\n    if (!ids.has(member.id)) {\n      nextOrderMembers.push(_objectSpread$1(_objectSpread$1({}, member), {}, {\n        order: member.order || 'none'\n      }));\n    }\n  });\n  return nextOrderMembers;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar mutexCounter = 0;\nvar MUTEX_ERROR = 'Mutex has been changed';\n\nvar mutexPromise = function mutexPromise(promise) {\n  return new Promise(function (resolve, reject) {\n    promise.then(function (r) {\n      return resolve(r);\n    }, function (e) {\n      return e !== MUTEX_ERROR && reject(e);\n    });\n  });\n};\n\nvar CubejsApi = /*#__PURE__*/function () {\n  function CubejsApi(apiToken, options) {\n    _classCallCheck(this, CubejsApi);\n\n    if (_typeof(apiToken) === 'object') {\n      options = apiToken;\n      apiToken = undefined;\n    }\n\n    options = options || {};\n\n    if (!options.transport && !options.apiUrl) {\n      throw new Error('The `apiUrl` option is required');\n    }\n\n    this.apiToken = apiToken;\n    this.apiUrl = options.apiUrl;\n    this.method = options.method;\n    this.headers = options.headers || {};\n    this.credentials = options.credentials;\n    this.transport = options.transport || new HttpTransport({\n      authorization: typeof apiToken === 'function' ? undefined : apiToken,\n      apiUrl: this.apiUrl,\n      method: this.method,\n      headers: this.headers,\n      credentials: this.credentials\n    });\n    this.pollInterval = options.pollInterval || 5;\n    this.parseDateMeasures = options.parseDateMeasures;\n  }\n\n  _createClass(CubejsApi, [{\n    key: \"request\",\n    value: function request(method, params) {\n      return this.transport.request(method, _objectSpread({\n        baseRequestId: uuid()\n      }, params));\n    }\n  }, {\n    key: \"loadMethod\",\n    value: function loadMethod(request, toResult, options, callback) {\n      var _this = this;\n\n      var mutexValue = ++mutexCounter;\n\n      if (typeof options === 'function' && !callback) {\n        callback = options;\n        options = undefined;\n      }\n\n      options = options || {};\n      var mutexKey = options.mutexKey || 'default';\n\n      if (options.mutexObj) {\n        options.mutexObj[mutexKey] = mutexValue;\n      }\n\n      var requestPromise = this.updateTransportAuthorization().then(function () {\n        return request();\n      });\n      var unsubscribed = false;\n\n      var checkMutex = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var requestInstance;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return requestPromise;\n\n                case 2:\n                  requestInstance = _context.sent;\n\n                  if (!(options.mutexObj && options.mutexObj[mutexKey] !== mutexValue)) {\n                    _context.next = 9;\n                    break;\n                  }\n\n                  unsubscribed = true;\n\n                  if (!requestInstance.unsubscribe) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 8;\n                  return requestInstance.unsubscribe();\n\n                case 8:\n                  throw MUTEX_ERROR;\n\n                case 9:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function checkMutex() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      var loadImpl = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(response, next) {\n          var requestInstance, subscribeNext, continueWait, body, error, result;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return requestPromise;\n\n                case 2:\n                  requestInstance = _context4.sent;\n\n                  subscribeNext = /*#__PURE__*/function () {\n                    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              if (!(options.subscribe && !unsubscribed)) {\n                                _context2.next = 8;\n                                break;\n                              }\n\n                              if (!requestInstance.unsubscribe) {\n                                _context2.next = 5;\n                                break;\n                              }\n\n                              return _context2.abrupt(\"return\", next());\n\n                            case 5:\n                              _context2.next = 7;\n                              return new Promise(function (resolve) {\n                                return setTimeout(function () {\n                                  return resolve();\n                                }, _this.pollInterval * 1000);\n                              });\n\n                            case 7:\n                              return _context2.abrupt(\"return\", next());\n\n                            case 8:\n                              return _context2.abrupt(\"return\", null);\n\n                            case 9:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                    return function subscribeNext() {\n                      return _ref3.apply(this, arguments);\n                    };\n                  }();\n\n                  continueWait = /*#__PURE__*/function () {\n                    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(wait) {\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              if (unsubscribed) {\n                                _context3.next = 5;\n                                break;\n                              }\n\n                              if (!wait) {\n                                _context3.next = 4;\n                                break;\n                              }\n\n                              _context3.next = 4;\n                              return new Promise(function (resolve) {\n                                return setTimeout(function () {\n                                  return resolve();\n                                }, _this.pollInterval * 1000);\n                              });\n\n                            case 4:\n                              return _context3.abrupt(\"return\", next());\n\n                            case 5:\n                              return _context3.abrupt(\"return\", null);\n\n                            case 6:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n\n                    return function continueWait(_x3) {\n                      return _ref4.apply(this, arguments);\n                    };\n                  }();\n\n                  _context4.next = 7;\n                  return _this.updateTransportAuthorization();\n\n                case 7:\n                  if (!(response.status === 502)) {\n                    _context4.next = 11;\n                    break;\n                  }\n\n                  _context4.next = 10;\n                  return checkMutex();\n\n                case 10:\n                  return _context4.abrupt(\"return\", continueWait(true));\n\n                case 11:\n                  if (!(response.status < 200 || response.status > 299)) {\n                    _context4.next = 13;\n                    break;\n                  }\n\n                  throw new Error(\"Request error. Response status: \".concat(response.status));\n\n                case 13:\n                  _context4.next = 15;\n                  return response.json();\n\n                case 15:\n                  body = _context4.sent;\n\n                  if (!(body.error === 'Continue wait')) {\n                    _context4.next = 21;\n                    break;\n                  }\n\n                  _context4.next = 19;\n                  return checkMutex();\n\n                case 19:\n                  if (options.progressCallback) {\n                    options.progressCallback(new ProgressResult(body));\n                  }\n\n                  return _context4.abrupt(\"return\", continueWait());\n\n                case 21:\n                  if (!(response.status !== 200)) {\n                    _context4.next = 34;\n                    break;\n                  }\n\n                  _context4.next = 24;\n                  return checkMutex();\n\n                case 24:\n                  if (!(!options.subscribe && requestInstance.unsubscribe)) {\n                    _context4.next = 27;\n                    break;\n                  }\n\n                  _context4.next = 27;\n                  return requestInstance.unsubscribe();\n\n                case 27:\n                  error = new RequestError(body.error, body); // TODO error class\n\n                  if (!callback) {\n                    _context4.next = 32;\n                    break;\n                  }\n\n                  callback(error);\n                  _context4.next = 33;\n                  break;\n\n                case 32:\n                  throw error;\n\n                case 33:\n                  return _context4.abrupt(\"return\", subscribeNext());\n\n                case 34:\n                  _context4.next = 36;\n                  return checkMutex();\n\n                case 36:\n                  if (!(!options.subscribe && requestInstance.unsubscribe)) {\n                    _context4.next = 39;\n                    break;\n                  }\n\n                  _context4.next = 39;\n                  return requestInstance.unsubscribe();\n\n                case 39:\n                  result = toResult(body);\n\n                  if (!callback) {\n                    _context4.next = 44;\n                    break;\n                  }\n\n                  callback(null, result);\n                  _context4.next = 45;\n                  break;\n\n                case 44:\n                  return _context4.abrupt(\"return\", result);\n\n                case 45:\n                  return _context4.abrupt(\"return\", subscribeNext());\n\n                case 46:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function loadImpl(_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      var promise = requestPromise.then(function (requestInstance) {\n        return mutexPromise(requestInstance.subscribe(loadImpl));\n      });\n\n      if (callback) {\n        return {\n          unsubscribe: function () {\n            var _unsubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n              var requestInstance;\n              return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      _context5.next = 2;\n                      return requestPromise;\n\n                    case 2:\n                      requestInstance = _context5.sent;\n                      unsubscribed = true;\n\n                      if (!requestInstance.unsubscribe) {\n                        _context5.next = 6;\n                        break;\n                      }\n\n                      return _context5.abrupt(\"return\", requestInstance.unsubscribe());\n\n                    case 6:\n                      return _context5.abrupt(\"return\", null);\n\n                    case 7:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, _callee5);\n            }));\n\n            function unsubscribe() {\n              return _unsubscribe.apply(this, arguments);\n            }\n\n            return unsubscribe;\n          }()\n        };\n      } else {\n        return promise;\n      }\n    }\n  }, {\n    key: \"updateTransportAuthorization\",\n    value: function () {\n      var _updateTransportAuthorization = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var token;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(typeof this.apiToken === 'function')) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                _context6.next = 3;\n                return this.apiToken();\n\n              case 3:\n                token = _context6.sent;\n\n                if (this.transport.authorization !== token) {\n                  this.transport.authorization = token;\n                }\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function updateTransportAuthorization() {\n        return _updateTransportAuthorization.apply(this, arguments);\n      }\n\n      return updateTransportAuthorization;\n    }()\n  }, {\n    key: \"load\",\n    value: function load(query, options, callback) {\n      var _this2 = this;\n\n      return this.loadMethod(function () {\n        return _this2.request('load', {\n          query: query,\n          queryType: 'multi'\n        });\n      }, function (response) {\n        return new ResultSet(response, {\n          parseDateMeasures: _this2.parseDateMeasures\n        });\n      }, options, callback);\n    }\n  }, {\n    key: \"sql\",\n    value: function sql(query, options, callback) {\n      var _this3 = this;\n\n      return this.loadMethod(function () {\n        return _this3.request('sql', {\n          query: query\n        });\n      }, function (response) {\n        return Array.isArray(response) ? response.map(function (body) {\n          return new SqlQuery(body);\n        }) : new SqlQuery(response);\n      }, options, callback);\n    }\n  }, {\n    key: \"meta\",\n    value: function meta(options, callback) {\n      var _this4 = this;\n\n      return this.loadMethod(function () {\n        return _this4.request('meta');\n      }, function (body) {\n        return new Meta(body);\n      }, options, callback);\n    }\n  }, {\n    key: \"dryRun\",\n    value: function dryRun(query, options, callback) {\n      var _this5 = this;\n\n      return this.loadMethod(function () {\n        return _this5.request('dry-run', {\n          query: query\n        });\n      }, function (response) {\n        return response;\n      }, options, callback);\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(query, options, callback) {\n      var _this6 = this;\n\n      return this.loadMethod(function () {\n        return _this6.request('subscribe', {\n          query: query,\n          queryType: 'multi'\n        });\n      }, function (body) {\n        return new ResultSet(body, {\n          parseDateMeasures: _this6.parseDateMeasures\n        });\n      }, _objectSpread(_objectSpread({}, options), {}, {\n        subscribe: true\n      }), callback);\n    }\n  }]);\n\n  return CubejsApi;\n}();\n\nvar index = function (apiToken, options) {\n  return new CubejsApi(apiToken, options);\n};\n\nexport default index;\nexport { GRANULARITIES, HttpTransport, ResultSet, areQueriesEqual, defaultHeuristics, defaultOrder, flattenFilters, getOrderMembersFromOrder, getQueryMembers, isQueryPresent, moveItemInArray, movePivotItem };","map":{"version":3,"sources":["../src/ResultSet.js","../src/SqlQuery.js","../src/Meta.js","../src/ProgressResult.js","../src/HttpTransport.js","../src/RequestError.js","../src/utils.js","../src/index.js"],"names":["moment","extendMoment","TIME_SERIES","day","range","d","month","year","hour","minute","second","week","DateRegex","LocalDateRegex","groupByToPairs","acc","data","key","keyFn","Array","QUERY_TYPE","REGULAR_QUERY","COMPARE_DATE_RANGE_QUERY","BLENDING_QUERY","ResultSet","axisValues","td","options","loadResponse","queryType","Object","xValues","yValues","drillDownLocator","normalizedPivotConfig","values","parentFilters","segments","measures","measureName","member","filters","operator","timeDimensions","value","cubeName","dimension","granularity","dateRange","dt","query","timezone","title","series","category","x","obj","resultIndex","row","measure","formatValue","v","delimiter","pivotConfig","defaultPivotConfig","y","fillMissingDates","joinDateRange","dimensions","mergeDeepLeft","substituteTimeDimensionMembers","allIncludedDimensions","allDimensions","dimensionFilter","timeDimension","dates","map","filter","reduce","minBy","maxBy","padToDay","start","end","pivotImpl","groupByXAxis","measureValue","equals","byXValues","groupBy","xGrouped","pipe","allYValues","rows","unnest","yGrouped","yValuesArray","pivots","minLengthPivot","memo","current","pivot","validate","Number","duplicateMeasures","allMeasures","flatten","a","aliasSeries","m","isMeasuresPresent","fromPairs","annotations","pluck","flatMeta","schema","extractFields","shortTitle","type","format","meta","currentItem","memberId","children","toColumns","item","path","fields","dimensionValue","dataIndex","otherColumns","seriesNames","aliasedAxis","dropLast","pivotQuery","result","results","clone","SqlQuery","memberMap","operators","string","name","number","Meta","cubes","c","cube","memberName","error","memberTypes","ProgressResult","HttpTransport","authorization","apiUrl","method","headers","credentials","baseRequestId","params","spanCounter","searchParams","JSON","url","runRequest","fetch","Authorization","body","subscribe","callback","RequestError","Error","DEFAULT_GRANULARITY","GRANULARITIES","query1","query2","oldQuery","props","sessionGranularity","state","newQuery","areQueriesEqual","defaultTimeDimension","shouldApplyHeuristicOrder","chartType","undefined","newChartType","q","nextPivotConfig","id","lastIndex","destinationIndex","removed","flattenFilters","keys","members","ids","indexedOrderMembers","indexBy","prop","entries","order","nextOrderMembers","currentOrder","orderMembers","mutexCounter","MUTEX_ERROR","mutexPromise","promise","resolve","e","reject","CubejsApi","apiToken","uuid","mutexValue","mutexKey","requestPromise","request","unsubscribed","checkMutex","requestInstance","loadImpl","subscribeNext","next","setTimeout","continueWait","response","toResult","unsubscribe","token","parseDateMeasures"],"mappings":"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","sourcesContent":["import {\n  groupBy, pipe, fromPairs, uniq, filter, map, unnest, dropLast, equals, reduce, minBy, maxBy, clone, mergeDeepLeft,\n  pluck, mergeAll, flatten,\n} from 'ramda';\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\n\nconst moment = extendMoment(Moment);\n\nconst TIME_SERIES = {\n  day: (range) => Array.from(range.by('day'))\n    .map(d => d.format('YYYY-MM-DDT00:00:00.000')),\n  month: (range) => Array.from(range.snapTo('month').by('month'))\n    .map(d => d.format('YYYY-MM-01T00:00:00.000')),\n  year: (range) => Array.from(range.snapTo('year').by('year'))\n    .map(d => d.format('YYYY-01-01T00:00:00.000')),\n  hour: (range) => Array.from(range.by('hour'))\n    .map(d => d.format('YYYY-MM-DDTHH:00:00.000')),\n  minute: (range) => Array.from(range.by('minute'))\n    .map(d => d.format('YYYY-MM-DDTHH:mm:00.000')),\n  second: (range) => Array.from(range.by('second'))\n    .map(d => d.format('YYYY-MM-DDTHH:mm:ss.000')),\n  week: (range) => Array.from(range.snapTo('isoweek').by('week'))\n    .map(d => d.startOf('isoweek').format('YYYY-MM-DDT00:00:00.000'))\n};\n\nconst DateRegex = /^\\d\\d\\d\\d-\\d\\d-\\d\\d$/;\nconst LocalDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z?$/;\n\nconst groupByToPairs = (keyFn) => {\n  const acc = new Map();\n\n  return (data) => {\n    data.forEach((row) => {\n      const key = keyFn(row);\n\n      if (!acc.has(key)) {\n        acc.set(key, []);\n      }\n\n      acc.get(key).push(row);\n    });\n\n    return Array.from(acc.entries());\n  };\n};\n\nexport const QUERY_TYPE = {\n  REGULAR_QUERY: 'regularQuery',\n  COMPARE_DATE_RANGE_QUERY: 'compareDateRangeQuery',\n  BLENDING_QUERY: 'blendingQuery',\n};\n\nclass ResultSet {\n  static measureFromAxis(axisValues) {\n    return axisValues[axisValues.length - 1];\n  }\n\n  static timeDimensionMember(td) {\n    return `${td.dimension}.${td.granularity}`;\n  }\n\n  static deserialize(data, options = {}) {\n    return new ResultSet(data.loadResponse, options);\n  }\n\n  constructor(loadResponse, options = {}) {\n    this.loadResponse = loadResponse;\n\n    if (this.loadResponse.queryType != null) {\n      this.queryType = loadResponse.queryType;\n      this.loadResponses = loadResponse.results;\n    } else {\n      this.queryType = QUERY_TYPE.REGULAR_QUERY;\n      this.loadResponse.pivotQuery = {\n        ...loadResponse.query,\n        queryType: this.queryType\n      };\n      this.loadResponses = [loadResponse];\n    }\n\n    if (!Object.values(QUERY_TYPE).includes(this.queryType)) {\n      throw new Error('Unknown query type');\n    }\n\n    this.parseDateMeasures = options.parseDateMeasures;\n    this.options = options;\n\n    this.backwardCompatibleData = [];\n  }\n\n  drillDown(drillDownLocator, pivotConfig) {\n    if (this.queryType === QUERY_TYPE.COMPARE_DATE_RANGE_QUERY) {\n      throw new Error('compareDateRange drillDown query is not currently supported');\n    }\n    if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {\n      throw new Error('Data blending drillDown query is not currently supported');\n    }\n\n    const { xValues = [], yValues = [] } = drillDownLocator;\n    const normalizedPivotConfig = this.normalizePivotConfig(pivotConfig);\n\n    const values = [];\n    normalizedPivotConfig.x.forEach((member, currentIndex) => values.push([member, xValues[currentIndex]]));\n    normalizedPivotConfig.y.forEach((member, currentIndex) => values.push([member, yValues[currentIndex]]));\n\n    const { filters: parentFilters = [], segments = [] } = this.query();\n    const { measures } = this.loadResponses[0].annotation;\n    let [, measureName] = values.find(([member]) => member === 'measures') || [];\n\n    if (measureName === undefined) {\n      [measureName] = Object.keys(measures);\n    }\n\n    if (!(measures[measureName] && measures[measureName].drillMembers || []).length) {\n      return null;\n    }\n\n    const filters = [\n      {\n        member: measureName,\n        operator: 'measureFilter',\n      },\n      ...parentFilters\n    ];\n    const timeDimensions = [];\n\n    values.filter(([member]) => member !== 'measures')\n      .forEach(([member, value]) => {\n        const [cubeName, dimension, granularity] = member.split('.');\n\n        if (granularity !== undefined) {\n          const range = moment.range(value, value).snapTo(\n            granularity\n          );\n\n          timeDimensions.push({\n            dimension: [cubeName, dimension].join('.'),\n            dateRange: [\n              range.start,\n              range.end\n            ].map((dt) => dt.format(moment.HTML5_FMT.DATETIME_LOCAL_MS)),\n          });\n        } else if (value == null) {\n          filters.push({\n            member,\n            operator: 'notSet',\n          });\n        } else {\n          filters.push({\n            member,\n            operator: 'equals',\n            values: [value.toString()],\n          });\n        }\n      });\n\n    const { query } = this.loadResponses[0];\n    if (\n      timeDimensions.length === 0 &&\n      query.timeDimensions.length > 0 &&\n      query.timeDimensions[0].granularity == null\n    ) {\n      timeDimensions.push(query.timeDimensions[0]);\n    }\n\n    return {\n      ...measures[measureName].drillMembersGrouped,\n      filters,\n      ...(segments.length > 0 ? { segments } : {}),\n      timeDimensions,\n      segments,\n      timezone: query.timezone\n    };\n  }\n\n  series(pivotConfig) {\n    return this.seriesNames(pivotConfig).map(({ title, key }) => ({\n      title,\n      key,\n      series: this.chartPivot(pivotConfig).map(({ category, x, ...obj }) => ({ value: obj[key], category, x }))\n    }));\n  }\n\n  axisValues(axis, resultIndex = 0) {\n    const { query } = this.loadResponses[resultIndex];\n\n    return row => {\n      const value = (measure) => axis.filter(d => d !== 'measures')\n        .map(d => (row[d] != null ? row[d] : null)).concat(measure ? [measure] : []);\n\n      if (axis.find(d => d === 'measures') && (query.measures || []).length) {\n        return query.measures.map(value);\n      }\n\n      return [value()];\n    };\n  }\n\n  axisValuesString(axisValues, delimiter) {\n    const formatValue = (v) => {\n      if (v == null) {\n        return '∅';\n      } else if (v === '') {\n        return '[Empty string]';\n      } else {\n        return v;\n      }\n    };\n    return axisValues.map(formatValue).join(delimiter || ', ');\n  }\n\n  static getNormalizedPivotConfig(query, pivotConfig = null) {\n    const defaultPivotConfig = {\n      x: [],\n      y: [],\n      fillMissingDates: true,\n      joinDateRange: false\n    };\n\n    const {\n      measures = [],\n      dimensions = []\n    } = query;\n\n    const timeDimensions = (query.timeDimensions || []).filter(td => !!td.granularity);\n\n    pivotConfig = pivotConfig || (timeDimensions.length ? {\n      x: timeDimensions.map(td => ResultSet.timeDimensionMember(td)),\n      y: dimensions\n    } : {\n      x: dimensions,\n      y: []\n    });\n\n    pivotConfig = mergeDeepLeft(pivotConfig, defaultPivotConfig);\n\n    const substituteTimeDimensionMembers = axis => axis.map(\n      subDim => (\n        (\n          timeDimensions.find(td => td.dimension === subDim) &&\n          !dimensions.find(d => d === subDim)\n        ) ?\n          ResultSet.timeDimensionMember(query.timeDimensions.find(td => td.dimension === subDim)) :\n          subDim\n      )\n    );\n\n    pivotConfig.x = substituteTimeDimensionMembers(pivotConfig.x);\n    pivotConfig.y = substituteTimeDimensionMembers(pivotConfig.y);\n\n    const allIncludedDimensions = pivotConfig.x.concat(pivotConfig.y);\n    const allDimensions = timeDimensions.map(td => ResultSet.timeDimensionMember(td)).concat(dimensions);\n\n    const dimensionFilter = (key) => allDimensions.includes(key) || key === 'measures';\n\n    pivotConfig.x = pivotConfig.x.concat(\n      allDimensions.filter(d => !allIncludedDimensions.includes(d))\n    )\n      .filter(dimensionFilter);\n    pivotConfig.y = pivotConfig.y.filter(dimensionFilter);\n\n    if (!pivotConfig.x.concat(pivotConfig.y).find(d => d === 'measures')) {\n      pivotConfig.y.push('measures');\n    }\n    if (!measures.length) {\n      pivotConfig.x = pivotConfig.x.filter(d => d !== 'measures');\n      pivotConfig.y = pivotConfig.y.filter(d => d !== 'measures');\n    }\n\n    return pivotConfig;\n  }\n\n  normalizePivotConfig(pivotConfig) {\n    return ResultSet.getNormalizedPivotConfig(this.loadResponse.pivotQuery, pivotConfig);\n  }\n\n  timeSeries(timeDimension) {\n    if (!timeDimension.granularity) {\n      return null;\n    }\n    let { dateRange } = timeDimension;\n    if (!dateRange) {\n      const dates = pipe(\n        map(\n          row => row[ResultSet.timeDimensionMember(timeDimension)] &&\n            moment(row[ResultSet.timeDimensionMember(timeDimension)])\n        ),\n        filter(r => !!r)\n      )(this.timeDimensionBackwardCompatibleData());\n\n      dateRange = dates.length && [\n        reduce(minBy(d => d.toDate()), dates[0], dates),\n        reduce(maxBy(d => d.toDate()), dates[0], dates)\n      ] || null;\n    }\n\n    if (!dateRange) {\n      return null;\n    }\n\n    const padToDay = timeDimension.dateRange ?\n      timeDimension.dateRange.find(d => d.match(DateRegex)) :\n      !['hour', 'minute', 'second'].includes(timeDimension.granularity);\n\n    const [start, end] = dateRange;\n    const range = moment.range(start, end);\n\n    if (!TIME_SERIES[timeDimension.granularity]) {\n      throw new Error(`Unsupported time granularity: ${timeDimension.granularity}`);\n    }\n\n    return TIME_SERIES[timeDimension.granularity](\n      padToDay ? range.snapTo('day') : range\n    );\n  }\n\n  pivot(pivotConfig) {\n    pivotConfig = this.normalizePivotConfig(pivotConfig);\n    const { pivotQuery: query } = this.loadResponse;\n\n    const pivotImpl = (resultIndex = 0) => {\n      let groupByXAxis = groupByToPairs(({ xValues }) => this.axisValuesString(xValues));\n\n      let measureValue = (row, measure) => row[measure];\n\n      if (\n        pivotConfig.fillMissingDates &&\n        pivotConfig.x.length === 1 &&\n        (equals(\n          pivotConfig.x,\n          (query.timeDimensions || [])\n            .filter(td => !!td.granularity)\n            .map(td => ResultSet.timeDimensionMember(td))\n        ))\n      ) {\n        const series = this.loadResponses.map(\n          (loadResponse) => this.timeSeries(loadResponse.query.timeDimensions[0])\n        );\n\n        if (series[0]) {\n          groupByXAxis = (rows) => {\n            const byXValues = groupBy(\n              ({ xValues }) => moment(xValues[0]).format(moment.HTML5_FMT.DATETIME_LOCAL_MS),\n              rows\n            );\n            return series[resultIndex].map(d => [d, byXValues[d] || [{ xValues: [d], row: {} }]]);\n          };\n\n          measureValue = (row, measure) => row[measure] || 0;\n        }\n      }\n\n      const xGrouped = pipe(\n        map(row => this.axisValues(pivotConfig.x, resultIndex)(row).map(xValues => ({ xValues, row }))),\n        unnest,\n        groupByXAxis\n      )(this.timeDimensionBackwardCompatibleData(resultIndex));\n\n      const allYValues = pipe(\n        map(\n          ([, rows]) => unnest(\n            // collect Y values only from filled rows\n            rows.filter(({ row }) => Object.keys(row).length > 0)\n              .map(({ row }) => this.axisValues(pivotConfig.y, resultIndex)(row))\n          )\n        ),\n        unnest,\n        uniq\n      )(xGrouped);\n\n      return xGrouped.map(([, rows]) => {\n        const { xValues } = rows[0];\n        const yGrouped = pipe(\n          map(({ row }) => this.axisValues(pivotConfig.y, resultIndex)(row).map(yValues => ({ yValues, row }))),\n          unnest,\n          groupBy(({ yValues }) => this.axisValuesString(yValues))\n        )(rows);\n\n        return {\n          xValues,\n          yValuesArray: unnest(allYValues.map(yValues => {\n            const measure = pivotConfig.x.find(d => d === 'measures') ?\n              ResultSet.measureFromAxis(xValues) :\n              ResultSet.measureFromAxis(yValues);\n\n            return (yGrouped[this.axisValuesString(yValues)] ||\n              [{ row: {} }]).map(({ row }) => [yValues, measureValue(row, measure)]);\n          }))\n        };\n      });\n    };\n\n    const pivots = this.loadResponses.length > 1\n      ? this.loadResponses.map((_, index) => pivotImpl(index))\n      : [];\n\n    return pivots.length\n      ? this.mergePivots(pivots, pivotConfig.joinDateRange)\n      : pivotImpl();\n  }\n\n  mergePivots(pivots, joinDateRange) {\n    const minLengthPivot = pivots.reduce(\n      (memo, current) => (memo != null && current.length >= memo.length ? memo : current), null\n    );\n\n    return minLengthPivot.map((_, index) => {\n      const xValues = joinDateRange\n        ? [pivots.map((pivot) => pivot[index] && pivot[index].xValues || []).join(', ')]\n        : minLengthPivot[index].xValues;\n\n      return {\n        xValues,\n        yValuesArray: unnest(pivots.map((pivot) => pivot[index].yValuesArray))\n      };\n    });\n  }\n\n  pivotedRows(pivotConfig) { // TODO\n    return this.chartPivot(pivotConfig);\n  }\n\n  chartPivot(pivotConfig) {\n    const validate = (value) => {\n      if (this.parseDateMeasures && LocalDateRegex.test(value)) {\n        return new Date(value);\n      } else if (!Number.isNaN(Number.parseFloat(value))) {\n        return Number.parseFloat(value);\n      }\n\n      return value;\n    };\n\n    const duplicateMeasures = new Set();\n    if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {\n      const allMeasures = flatten(this.loadResponses.map(({ query }) => query.measures));\n      allMeasures.filter((e, i, a) => a.indexOf(e) !== i).forEach(m => duplicateMeasures.add(m));\n    }\n\n    const aliasSeries = (yValues, i) => {\n      // manual alias\n      if (pivotConfig && pivotConfig.aliasSeries && pivotConfig.aliasSeries[i]) {\n        return [pivotConfig.aliasSeries[i], ...yValues];\n      } else if (duplicateMeasures.has(yValues[0])) {\n        return [i, ...yValues];\n      }\n      return [yValues];\n    };\n\n    return this.pivot(pivotConfig).map(({ xValues, yValuesArray }) => ({\n      category: this.axisValuesString(xValues, ','), // TODO deprecated\n      x: this.axisValuesString(xValues, ','),\n      xValues,\n      ...(\n        yValuesArray\n          .map(([yValues, m], i) => ({\n            [this.axisValuesString(aliasSeries(yValues, i), ',')]: m && validate(m),\n          }))\n          .reduce((a, b) => Object.assign(a, b), {})\n      )\n    }));\n  }\n\n  tablePivot(pivotConfig) {\n    const normalizedPivotConfig = this.normalizePivotConfig(pivotConfig || {});\n    const isMeasuresPresent = normalizedPivotConfig.x.concat(normalizedPivotConfig.y).includes('measures');\n\n    return this.pivot(normalizedPivotConfig).map(({ xValues, yValuesArray }) => fromPairs(\n      normalizedPivotConfig.x\n        .map((key, index) => [key, xValues[index]])\n        .concat(\n          isMeasuresPresent ? yValuesArray.map(([yValues, measure]) => [\n            yValues.length ? yValues.join() : 'value',\n            measure\n          ]) : []\n        )\n    ));\n  }\n\n  tableColumns(pivotConfig) {\n    const normalizedPivotConfig = this.normalizePivotConfig(pivotConfig || {});\n    const annotations = pipe(\n      pluck('annotation'),\n      reduce(mergeDeepLeft(), {})\n    )(this.loadResponses);\n    const flatMeta = Object.values(annotations).reduce((a, b) => ({ ...a, ...b }), {});\n    const schema = {};\n\n    const extractFields = (key) => {\n      const { title, shortTitle, type, format, meta } = flatMeta[key] || {};\n\n      return {\n        key,\n        title,\n        shortTitle,\n        type,\n        format,\n        meta\n      };\n    };\n\n    const pivot = this.pivot(normalizedPivotConfig);\n\n    (pivot[0] && pivot[0].yValuesArray || []).forEach(([yValues]) => {\n      if (yValues.length > 0) {\n        let currentItem = schema;\n\n        yValues.forEach((value, index) => {\n          currentItem[value] = {\n            key: value,\n            memberId: normalizedPivotConfig.y[index] === 'measures'\n              ? value\n              : normalizedPivotConfig.y[index],\n            children: (currentItem[value] && currentItem[value].children) || {}\n          };\n\n          currentItem = currentItem[value].children;\n        });\n      }\n    });\n\n    const toColumns = (item = {}, path = []) => {\n      if (Object.keys(item).length === 0) {\n        return [];\n      }\n\n      return Object.values(item).map(({ key, ...currentItem }) => {\n        const children = toColumns(currentItem.children, [\n          ...path,\n          key\n        ]);\n\n        const { title, shortTitle, ...fields } = extractFields(currentItem.memberId);\n\n        const dimensionValue = key !== currentItem.memberId || title == null ? key : '';\n\n        if (!children.length) {\n          return {\n            ...fields,\n            key,\n            dataIndex: [...path, key].join(),\n            title: [title, dimensionValue].join(' ').trim(),\n            shortTitle: dimensionValue || shortTitle,\n          };\n        }\n\n        return {\n          ...fields,\n          key,\n          title: [title, dimensionValue].join(' ').trim(),\n          shortTitle: dimensionValue || shortTitle,\n          children,\n        };\n      });\n    };\n\n    let otherColumns = [];\n\n    if (!pivot.length && normalizedPivotConfig.y.includes('measures')) {\n      otherColumns = (this.loadResponses[0].query.measures || []).map(\n        (key) => ({ ...extractFields(key), dataIndex: key })\n      );\n    }\n\n    // Syntatic column to display the measure value\n    if (!normalizedPivotConfig.y.length && normalizedPivotConfig.x.includes('measures')) {\n      otherColumns.push({\n        key: 'value',\n        dataIndex: 'value',\n        title: 'Value',\n        shortTitle: 'Value',\n        type: 'string',\n      });\n    }\n\n    return normalizedPivotConfig.x\n      .map((key) => {\n        if (key === 'measures') {\n          return {\n            key: 'measures',\n            dataIndex: 'measures',\n            title: 'Measures',\n            shortTitle: 'Measures',\n            type: 'string',\n          };\n        }\n\n        return ({ ...extractFields(key), dataIndex: key });\n      })\n      .concat(toColumns(schema))\n      .concat(otherColumns);\n  }\n\n  totalRow(pivotConfig) {\n    return this.chartPivot(pivotConfig)[0];\n  }\n\n  categories(pivotConfig) { // TODO\n    return this.chartPivot(pivotConfig);\n  }\n\n  seriesNames(pivotConfig) {\n    pivotConfig = this.normalizePivotConfig(pivotConfig);\n    const measures = pipe(\n      pluck('annotation'),\n      pluck('measures'),\n      mergeAll\n    )(this.loadResponses);\n\n    const seriesNames = unnest(this.loadResponses.map((_, index) => pipe(\n      map(this.axisValues(pivotConfig.y, index)),\n      unnest,\n      uniq\n    )(\n      this.timeDimensionBackwardCompatibleData(index)\n    )));\n    const duplicateMeasures = new Set();\n    if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {\n      const allMeasures = flatten(this.loadResponses.map(({ query }) => query.measures));\n      allMeasures.filter((e, i, a) => a.indexOf(e) !== i).forEach(m => duplicateMeasures.add(m));\n    }\n\n    const aliasSeries = (yValues, i) => {\n      if (pivotConfig && pivotConfig.aliasSeries && pivotConfig.aliasSeries[i]) {\n        return [pivotConfig.aliasSeries[i], ...yValues];\n      } else if (duplicateMeasures.has(yValues[0])) {\n        return [i, ...yValues];\n      }\n      return yValues;\n    };\n\n    return seriesNames.map((axisValues, i) => {\n      const aliasedAxis = aliasSeries(axisValues, i);\n      return {\n        title: this.axisValuesString(\n          pivotConfig.y.find(d => d === 'measures') ?\n            dropLast(1, aliasedAxis).concat(\n              measures[\n                ResultSet.measureFromAxis(axisValues)\n              ].title\n            ) :\n            aliasedAxis, ', '\n        ),\n        key: this.axisValuesString(aliasedAxis, ','),\n        yValues: axisValues\n      };\n    });\n  }\n\n  query() {\n    if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {\n      throw new Error(`Method is not supported for a '${this.queryType}' query type. Please use decompose`);\n    }\n\n    return this.loadResponses[0].query;\n  }\n\n  pivotQuery() {\n    return this.loadResponse.pivotQuery || null;\n  }\n\n  rawData() {\n    if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {\n      throw new Error(`Method is not supported for a '${this.queryType}' query type. Please use decompose`);\n    }\n\n    return this.loadResponses[0].data;\n  }\n\n  annotation() {\n    if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {\n      throw new Error(`Method is not supported for a '${this.queryType}' query type. Please use decompose`);\n    }\n\n    return this.loadResponses[0].annotation;\n  }\n\n  timeDimensionBackwardCompatibleData(resultIndex = 0) {\n    if (!this.backwardCompatibleData[resultIndex]) {\n      const { data, query } = this.loadResponses[resultIndex];\n      const timeDimensions = (query.timeDimensions || []).filter(td => !!td.granularity);\n\n      this.backwardCompatibleData[resultIndex] = data.map(row => (\n        {\n          ...row,\n          ...(\n            fromPairs(Object.keys(row)\n              .filter(\n                field => timeDimensions.find(d => d.dimension === field) &&\n                  !row[ResultSet.timeDimensionMember(timeDimensions.find(d => d.dimension === field))]\n              ).map(field => (\n                [ResultSet.timeDimensionMember(timeDimensions.find(d => d.dimension === field)), row[field]]\n              )))\n          )\n        }\n      ));\n    }\n\n    return this.backwardCompatibleData[resultIndex];\n  }\n\n  decompose() {\n    return this.loadResponses.map((result) => new ResultSet({\n      queryType: QUERY_TYPE.REGULAR_QUERY,\n      pivotQuery: {\n        ...result.query,\n        queryType: QUERY_TYPE.REGULAR_QUERY,\n      },\n      results: [result]\n    }, this.options));\n  }\n\n  serialize() {\n    return {\n      loadResponse: clone(this.loadResponse)\n    };\n  }\n}\n\nexport default ResultSet;\n","export default class SqlQuery {\n  constructor(sqlQuery) {\n    this.sqlQuery = sqlQuery;\n  }\n\n  rawQuery() {\n    return this.sqlQuery.sql;\n  }\n\n  sql() {\n    return this.rawQuery().sql[0];\n  }\n}\n","/**\n * @module @cubejs-client/core\n */\n\nimport { unnest, fromPairs } from 'ramda';\n\nconst memberMap = (memberArray) => fromPairs(memberArray.map(m => [m.name, m]));\n\nconst operators = {\n  string: [\n    { name: 'contains', title: 'contains' },\n    { name: 'notContains', title: 'does not contain' },\n    { name: 'equals', title: 'equals' },\n    { name: 'notEquals', title: 'does not equal' },\n    { name: 'set', title: 'is set' },\n    { name: 'notSet', title: 'is not set' }\n  ],\n  number: [\n    { name: 'equals', title: 'equals' },\n    { name: 'notEquals', title: 'does not equal' },\n    { name: 'set', title: 'is set' },\n    { name: 'notSet', title: 'is not set' },\n    { name: 'gt', title: '>' },\n    { name: 'gte', title: '>=' },\n    { name: 'lt', title: '<' },\n    { name: 'lte', title: '<=' }\n  ]\n};\n\n/**\n * Contains information about available cubes and it's members.\n */\nclass Meta {\n  constructor(metaResponse) {\n    this.meta = metaResponse;\n    const { cubes } = this.meta;\n    this.cubes = cubes;\n    this.cubesMap = fromPairs(cubes.map(c => [\n      c.name,\n      { measures: memberMap(c.measures), dimensions: memberMap(c.dimensions), segments: memberMap(c.segments) }\n    ]));\n  }\n\n  membersForQuery(query, memberType) {\n    return unnest(this.cubes.map(c => c[memberType]));\n  }\n  \n  resolveMember(memberName, memberType) {\n    const [cube] = memberName.split('.');\n    if (!this.cubesMap[cube]) {\n      return { title: memberName, error: `Cube not found ${cube} for path '${memberName}'` };\n    }\n    const memberTypes = Array.isArray(memberType) ? memberType : [memberType];\n    const member = memberTypes\n      .map(type => this.cubesMap[cube][type] && this.cubesMap[cube][type][memberName])\n      .find(m => m);\n    if (!member) {\n      return { title: memberName, error: `Path not found '${memberName}'` };\n    }\n    return member;\n  }\n\n  defaultTimeDimensionNameFor(memberName) {\n    const [cube] = memberName.split('.');\n    if (!this.cubesMap[cube]) {\n      return null;\n    }\n    return Object.keys(this.cubesMap[cube].dimensions || {})\n      .find(d => this.cubesMap[cube].dimensions[d].type === 'time');\n  }\n\n  filterOperatorsForMember(memberName, memberType) {\n    const member = this.resolveMember(memberName, memberType);\n    return operators[member.type] || operators.string;\n  }\n}\n\nexport default Meta;\n","export default class ProgressResult {\n  constructor(progressResponse) {\n    this.progressResponse = progressResponse;\n  }\n\n  stage() {\n    return this.progressResponse.stage;\n  }\n\n  timeElapsed() {\n    return this.progressResponse.timeElapsed;\n  }\n}\n","import fetch from 'cross-fetch';\nimport 'url-search-params-polyfill';\n\nclass HttpTransport {\n  constructor({ authorization, apiUrl, method, headers = {}, credentials }) {\n    this.authorization = authorization;\n    this.apiUrl = apiUrl;\n    this.method = method;\n    this.headers = headers;\n    this.credentials = credentials;\n  }\n\n  request(method, { baseRequestId, ...params }) {\n    let spanCounter = 1;\n    const searchParams = new URLSearchParams(\n      params && Object.keys(params)\n        .map(k => ({ [k]: typeof params[k] === 'object' ? JSON.stringify(params[k]) : params[k] }))\n        .reduce((a, b) => ({ ...a, ...b }), {})\n    );\n\n    let url = `${this.apiUrl}/${method}${searchParams.toString().length ? `?${searchParams}` : ''}`;\n    \n    this.method = this.method || (url.length < 2000 ? 'GET' : 'POST');\n    if (this.method === 'POST') {\n      url = `${this.apiUrl}/${method}`;\n      this.headers['Content-Type'] = 'application/json';\n    }\n\n    // Currently, all methods make GET requests. If a method makes a request with a body payload,\n    // remember to add {'Content-Type': 'application/json'} to the header.\n    const runRequest = () => fetch(url, {\n      method: this.method,\n      headers: {\n        Authorization: this.authorization,\n        'x-request-id': baseRequestId && `${baseRequestId}-span-${spanCounter++}`,\n        ...this.headers\n      },\n      credentials: this.credentials,\n      body: this.method === 'POST' ? JSON.stringify(params) : null\n    });\n\n    return {\n      async subscribe(callback) {\n        const result = await runRequest();\n        return callback(result, () => this.subscribe(callback));\n      }\n    };\n  }\n}\n\nexport default HttpTransport;\n","export default class RequestError extends Error {\n  constructor(message, response) {\n    super(message);\n    this.response = response;\n  }\n}\n","import { indexBy, prop, clone, equals } from 'ramda';\n\nexport const DEFAULT_GRANULARITY = 'day';\n\nexport const GRANULARITIES = [\n  { name: undefined, title: 'w/o grouping' },\n  { name: 'second', title: 'Second' },\n  { name: 'minute', title: 'Minute' },\n  { name: 'hour', title: 'Hour' },\n  { name: 'day', title: 'Day' },\n  { name: 'week', title: 'Week' },\n  { name: 'month', title: 'Month' },\n  { name: 'year', title: 'Year' },\n];\n\nexport function areQueriesEqual(query1 = {}, query2 = {}) {\n  return (\n    equals(Object.entries((query1 && query1.order) || {}), Object.entries((query2 && query2.order) || {})) &&\n    equals(query1, query2)\n  );\n}\n\nexport function defaultOrder(query) {\n  const granularity = (query.timeDimensions || []).find((d) => d.granularity);\n\n  if (granularity) {\n    return {\n      [granularity.dimension]: 'asc',\n    };\n  } else if ((query.measures || []).length > 0 && (query.dimensions || []).length > 0) {\n    return {\n      [query.measures[0]]: 'desc',\n    };\n  } else if ((query.dimensions || []).length > 0) {\n    return {\n      [query.dimensions[0]]: 'asc',\n    };\n  }\n\n  return {};\n}\n\nexport function defaultHeuristics(newState, oldQuery = {}, options) {\n  const { query, ...props } = clone(newState);\n  const { meta, sessionGranularity } = options;\n  const granularity = sessionGranularity || DEFAULT_GRANULARITY;\n\n  let state = {\n    query,\n    ...props,\n  };\n\n  let newQuery = null;\n  if (!areQueriesEqual(query, oldQuery)) {\n    newQuery = query;\n  }\n\n  if (Array.isArray(newQuery) || Array.isArray(oldQuery)) {\n    return newState;\n  }\n\n  if (newQuery) {\n    if (\n      (oldQuery.timeDimensions || []).length === 1 &&\n      (newQuery.timeDimensions || []).length === 1 &&\n      newQuery.timeDimensions[0].granularity &&\n      oldQuery.timeDimensions[0].granularity !== newQuery.timeDimensions[0].granularity\n    ) {\n      state = {\n        ...state,\n        sessionGranularity: newQuery.timeDimensions[0].granularity,\n      };\n    }\n\n    if (\n      ((oldQuery.measures || []).length === 0 && (newQuery.measures || []).length > 0) ||\n      ((oldQuery.measures || []).length === 1 &&\n        (newQuery.measures || []).length === 1 &&\n        oldQuery.measures[0] !== newQuery.measures[0])\n    ) {\n      const [td] = newQuery.timeDimensions || [];\n      const defaultTimeDimension = meta.defaultTimeDimensionNameFor(newQuery.measures[0]);\n      newQuery = {\n        ...newQuery,\n        timeDimensions: defaultTimeDimension\n          ? [\n            {\n              dimension: defaultTimeDimension,\n              granularity: (td && td.granularity) || granularity,\n              dateRange: td && td.dateRange,\n            },\n          ]\n          : [],\n      };\n\n      return {\n        ...state,\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        chartType: defaultTimeDimension ? 'line' : 'number',\n      };\n    }\n\n    if ((oldQuery.dimensions || []).length === 0 && (newQuery.dimensions || []).length > 0) {\n      newQuery = {\n        ...newQuery,\n        timeDimensions: (newQuery.timeDimensions || []).map((td) => ({ ...td, granularity: undefined })),\n      };\n\n      return {\n        ...state,\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        chartType: 'table',\n      };\n    }\n\n    if ((oldQuery.dimensions || []).length > 0 && (newQuery.dimensions || []).length === 0) {\n      newQuery = {\n        ...newQuery,\n        timeDimensions: (newQuery.timeDimensions || []).map((td) => ({\n          ...td,\n          granularity: td.granularity || granularity,\n        })),\n      };\n\n      return {\n        ...state,\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        chartType: (newQuery.timeDimensions || []).length ? 'line' : 'number',\n      };\n    }\n\n    if (\n      ((oldQuery.dimensions || []).length > 0 || (oldQuery.measures || []).length > 0) &&\n      (newQuery.dimensions || []).length === 0 &&\n      (newQuery.measures || []).length === 0\n    ) {\n      newQuery = {\n        ...newQuery,\n        timeDimensions: [],\n        filters: [],\n      };\n\n      return {\n        ...state,\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: newQuery,\n        sessionGranularity: null,\n      };\n    }\n    return state;\n  }\n\n  if (state.chartType) {\n    const newChartType = state.chartType;\n    if (\n      (newChartType === 'line' || newChartType === 'area') &&\n      (oldQuery.timeDimensions || []).length === 1 &&\n      !oldQuery.timeDimensions[0].granularity\n    ) {\n      const [td] = oldQuery.timeDimensions;\n      return {\n        ...state,\n        pivotConfig: null,\n        query: {\n          ...oldQuery,\n          timeDimensions: [{ ...td, granularity }],\n        },\n      };\n    }\n\n    if (\n      (newChartType === 'pie' || newChartType === 'table' || newChartType === 'number') &&\n      (oldQuery.timeDimensions || []).length === 1 &&\n      oldQuery.timeDimensions[0].granularity\n    ) {\n      const [td] = oldQuery.timeDimensions;\n      return {\n        ...state,\n        pivotConfig: null,\n        shouldApplyHeuristicOrder: true,\n        query: {\n          ...oldQuery,\n          timeDimensions: [{ ...td, granularity: undefined }],\n        },\n      };\n    }\n  }\n\n  return state;\n}\n\nexport function isQueryPresent(query) {\n  if (!query) {\n    return false;\n  }\n\n  return (Array.isArray(query) ? query : [query]).every(\n    (q) => (q.measures && q.measures.length) ||\n      (q.dimensions && q.dimensions.length) ||\n      (q.timeDimensions && q.timeDimensions.length)\n  );\n}\n\nexport function movePivotItem(pivotConfig, sourceIndex, destinationIndex, sourceAxis, destinationAxis) {\n  const nextPivotConfig = {\n    ...pivotConfig,\n    x: [...pivotConfig.x],\n    y: [...pivotConfig.y],\n  };\n  const id = pivotConfig[sourceAxis][sourceIndex];\n  const lastIndex = nextPivotConfig[destinationAxis].length - 1;\n\n  if (id === 'measures') {\n    destinationIndex = lastIndex + 1;\n  } else if (destinationIndex >= lastIndex && nextPivotConfig[destinationAxis][lastIndex] === 'measures') {\n    destinationIndex = lastIndex - 1;\n  }\n\n  nextPivotConfig[sourceAxis].splice(sourceIndex, 1);\n  nextPivotConfig[destinationAxis].splice(destinationIndex, 0, id);\n\n  return nextPivotConfig;\n}\n\nexport function moveItemInArray(list, sourceIndex, destinationIndex) {\n  const result = [...list];\n  const [removed] = result.splice(sourceIndex, 1);\n  result.splice(destinationIndex, 0, removed);\n\n  return result;\n}\n\nexport function flattenFilters(filters = []) {\n  return filters.reduce((memo, filter) => {\n    if (filter.or || filter.and) {\n      return [...memo, ...flattenFilters(filter.or || filter.and)];\n    }\n\n    return [...memo, filter];\n  }, []);\n}\n\nexport function getQueryMembers(query = {}) {\n  const keys = ['measures', 'dimensions', 'segments'];\n  const members = new Set();\n\n  keys.forEach((key) => (query[key] || []).forEach((member) => members.add(member)));\n  (query.timeDimensions || []).forEach((td) => members.add(td.dimension));\n\n  flattenFilters(query.filters).forEach((filter) => members.add(filter.dimension || filter.member));\n\n  return [...members];\n}\n\nexport function getOrderMembersFromOrder(orderMembers, order) {\n  const ids = new Set();\n  const indexedOrderMembers = indexBy(prop('id'), orderMembers);\n  const entries = Array.isArray(order) ? order : Object.entries(order || {});\n  const nextOrderMembers = [];\n\n  entries.forEach(([memberId, currentOrder]) => {\n    if (currentOrder !== 'none' && indexedOrderMembers[memberId]) {\n      ids.add(memberId);\n      nextOrderMembers.push({\n        ...indexedOrderMembers[memberId],\n        order: currentOrder,\n      });\n    }\n  });\n  orderMembers.forEach((member) => {\n    if (!ids.has(member.id)) {\n      nextOrderMembers.push({\n        ...member,\n        order: member.order || 'none',\n      });\n    }\n  });\n\n  return nextOrderMembers;\n}\n","import uuid from 'uuid/v4';\nimport ResultSet from './ResultSet';\nimport SqlQuery from './SqlQuery';\nimport Meta from './Meta';\nimport ProgressResult from './ProgressResult';\nimport HttpTransport from './HttpTransport';\nimport RequestError from './RequestError';\n\nlet mutexCounter = 0;\n\nconst MUTEX_ERROR = 'Mutex has been changed';\n\nconst mutexPromise = (promise) => new Promise((resolve, reject) => {\n  promise.then(r => resolve(r), e => e !== MUTEX_ERROR && reject(e));\n});\n\nclass CubejsApi {\n  constructor(apiToken, options) {\n    if (typeof apiToken === 'object') {\n      options = apiToken;\n      apiToken = undefined;\n    }\n    options = options || {};\n\n    if (!options.transport && !options.apiUrl) {\n      throw new Error('The `apiUrl` option is required');\n    }\n\n    this.apiToken = apiToken;\n    this.apiUrl = options.apiUrl;\n    this.method = options.method;\n    this.headers = options.headers || {};\n    this.credentials = options.credentials;\n    this.transport = options.transport || new HttpTransport({\n      authorization: typeof apiToken === 'function' ? undefined : apiToken,\n      apiUrl: this.apiUrl,\n      method: this.method,\n      headers: this.headers,\n      credentials: this.credentials\n    });\n    this.pollInterval = options.pollInterval || 5;\n    this.parseDateMeasures = options.parseDateMeasures;\n  }\n\n  request(method, params) {\n    return this.transport.request(method, { baseRequestId: uuid(), ...params });\n  }\n\n  loadMethod(request, toResult, options, callback) {\n    const mutexValue = ++mutexCounter;\n    if (typeof options === 'function' && !callback) {\n      callback = options;\n      options = undefined;\n    }\n\n    options = options || {};\n\n    const mutexKey = options.mutexKey || 'default';\n    if (options.mutexObj) {\n      options.mutexObj[mutexKey] = mutexValue;\n    }\n\n    const requestPromise = this.updateTransportAuthorization().then(() => request());\n\n    let unsubscribed = false;\n\n    const checkMutex = async () => {\n      const requestInstance = await requestPromise;\n\n      if (options.mutexObj && options.mutexObj[mutexKey] !== mutexValue) {\n        unsubscribed = true;\n        if (requestInstance.unsubscribe) {\n          await requestInstance.unsubscribe();\n        }\n        throw MUTEX_ERROR;\n      }\n    };\n\n    const loadImpl = async (response, next) => {\n      const requestInstance = await requestPromise;\n\n      const subscribeNext = async () => {\n        if (options.subscribe && !unsubscribed) {\n          if (requestInstance.unsubscribe) {\n            return next();\n          } else {\n            await new Promise(resolve => setTimeout(() => resolve(), this.pollInterval * 1000));\n            return next();\n          }\n        }\n        return null;\n      };\n\n      const continueWait = async (wait) => {\n        if (!unsubscribed) {\n          if (wait) {\n            await new Promise(resolve => setTimeout(() => resolve(), this.pollInterval * 1000));\n          }\n          return next();\n        }\n        return null;\n      };\n\n      await this.updateTransportAuthorization();\n\n      if (response.status === 502) {\n        await checkMutex();\n        return continueWait(true);\n      }\n\n      if (response.status < 200 || response.status > 299) {\n        throw new Error(`Request error. Response status: ${response.status}`);\n      }\n\n      const body = await response.json();\n      if (body.error === 'Continue wait') {\n        await checkMutex();\n        if (options.progressCallback) {\n          options.progressCallback(new ProgressResult(body));\n        }\n        return continueWait();\n      }\n      if (response.status !== 200) {\n        await checkMutex();\n        if (!options.subscribe && requestInstance.unsubscribe) {\n          await requestInstance.unsubscribe();\n        }\n\n        const error = new RequestError(body.error, body); // TODO error class\n        if (callback) {\n          callback(error);\n        } else {\n          throw error;\n        }\n\n        return subscribeNext();\n      }\n      await checkMutex();\n      if (!options.subscribe && requestInstance.unsubscribe) {\n        await requestInstance.unsubscribe();\n      }\n      const result = toResult(body);\n      if (callback) {\n        callback(null, result);\n      } else {\n        return result;\n      }\n\n      return subscribeNext();\n    };\n\n    const promise = requestPromise.then(requestInstance => mutexPromise(requestInstance.subscribe(loadImpl)));\n\n    if (callback) {\n      return {\n        unsubscribe: async () => {\n          const requestInstance = await requestPromise;\n\n          unsubscribed = true;\n          if (requestInstance.unsubscribe) {\n            return requestInstance.unsubscribe();\n          }\n          return null;\n        }\n      };\n    } else {\n      return promise;\n    }\n  }\n\n  async updateTransportAuthorization() {\n    if (typeof this.apiToken === 'function') {\n      const token = await this.apiToken();\n      if (this.transport.authorization !== token) {\n        this.transport.authorization = token;\n      }\n    }\n  }\n\n  load(query, options, callback) {\n    return this.loadMethod(\n      () => this.request('load', {\n        query,\n        queryType: 'multi'\n      }),\n      (response) => new ResultSet(response, { parseDateMeasures: this.parseDateMeasures }),\n      options,\n      callback\n    );\n  }\n\n  sql(query, options, callback) {\n    return this.loadMethod(\n      () => this.request('sql', { query }),\n      (response) => (Array.isArray(response) ? response.map((body) => new SqlQuery(body)) : new SqlQuery(response)),\n      options,\n      callback\n    );\n  }\n\n  meta(options, callback) {\n    return this.loadMethod(\n      () => this.request('meta'),\n      (body) => new Meta(body),\n      options,\n      callback\n    );\n  }\n\n  dryRun(query, options, callback) {\n    return this.loadMethod(\n      () => this.request('dry-run', { query }),\n      (response) => response,\n      options,\n      callback\n    );\n  }\n\n  subscribe(query, options, callback) {\n    return this.loadMethod(\n      () => this.request('subscribe', {\n        query,\n        queryType: 'multi'\n      }),\n      (body) => new ResultSet(body, { parseDateMeasures: this.parseDateMeasures }),\n      { ...options, subscribe: true },\n      callback\n    );\n  }\n}\n\nexport default (apiToken, options) => new CubejsApi(apiToken, options);\n\nexport { HttpTransport, ResultSet };\nexport {\n  areQueriesEqual,\n  defaultHeuristics,\n  movePivotItem,\n  isQueryPresent,\n  moveItemInArray,\n  defaultOrder,\n  flattenFilters,\n  getQueryMembers,\n  getOrderMembersFromOrder,\n  GRANULARITIES\n} from './utils';\n"]},"metadata":{},"sourceType":"module"}