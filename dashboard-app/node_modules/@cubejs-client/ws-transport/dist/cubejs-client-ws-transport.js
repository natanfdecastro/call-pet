'use strict';

var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _createClass = require('@babel/runtime/helpers/createClass');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
require('core-js/modules/es.array.for-each.js');
require('core-js/modules/web.dom-collections.for-each.js');
require('core-js/modules/es.date.to-string.js');
require('core-js/modules/es.object.keys.js');
require('core-js/modules/es.object.to-string.js');
require('core-js/modules/es.promise.js');
require('core-js/modules/web.timers.js');
require('core-js/modules/es.array.find.js');
require('core-js/modules/es.array.filter.js');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var WebSocket = require('isomorphic-ws');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _objectWithoutProperties__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutProperties);
var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var WebSocket__default = /*#__PURE__*/_interopDefaultLegacy(WebSocket);

/**
 * @title @cubejs-client/ws-transport
 * @permalink /@cubejs-client-ws-transport
 * @menuCategory Cube.js Frontend
 * @subcategory Reference
 * @menuOrder 4
 * @description WebSocket transport for Cube.js client
 */
var WebSocketTransportResult = /*#__PURE__*/function () {
  function WebSocketTransportResult(_ref) {
    var status = _ref.status,
        message = _ref.message;

    _classCallCheck__default['default'](this, WebSocketTransportResult);

    _defineProperty__default['default'](this, "status", void 0);

    _defineProperty__default['default'](this, "result", void 0);

    this.status = status;
    this.result = message;
  }

  _createClass__default['default'](WebSocketTransportResult, [{
    key: "json",
    value: function () {
      var _json = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.result);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function json() {
        return _json.apply(this, arguments);
      }

      return json;
    }()
  }]);

  return WebSocketTransportResult;
}();

var WebSocketTransport = /*#__PURE__*/function () {
  function WebSocketTransport(_ref2) {
    var authorization = _ref2.authorization,
        apiUrl = _ref2.apiUrl,
        heartBeatInterval = _ref2.heartBeatInterval,
        hearBeatInterval = _ref2.hearBeatInterval;

    _classCallCheck__default['default'](this, WebSocketTransport);

    _defineProperty__default['default'](this, "apiUrl", void 0);

    _defineProperty__default['default'](this, "heartBeatInterval", 60);

    _defineProperty__default['default'](this, "token", void 0);

    _defineProperty__default['default'](this, "ws", null);

    _defineProperty__default['default'](this, "messageCounter", 1);

    _defineProperty__default['default'](this, "messageIdToSubscription", {});

    _defineProperty__default['default'](this, "messageQueue", []);

    this.token = authorization;
    this.apiUrl = apiUrl;

    if (heartBeatInterval) {
      this.heartBeatInterval = heartBeatInterval;
    } else if (hearBeatInterval) {
      console.warn('Option hearBeatInterval is deprecated. It was replaced by heartBeatInterval.');
      this.heartBeatInterval = hearBeatInterval;
    }
  }

  _createClass__default['default'](WebSocketTransport, [{
    key: "authorization",
    get: function get() {
      return this.token;
    },
    set: function set(token) {
      this.token = token;

      if (this.ws) {
        this.ws.close();
      }
    }
  }, {
    key: "close",
    value: function () {
      var _close = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this.ws) {
                  this.ws.close();
                }

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function close() {
        return _close.apply(this, arguments);
      }

      return close;
    }()
  }, {
    key: "initSocket",
    value: function initSocket() {
      var _this = this;

      if (this.ws) {
        return this.ws.initPromise;
      }

      var ws = new WebSocket__default['default'](this.apiUrl);
      ws.messageIdSent = {};

      ws.sendMessage = function (message) {
        if (!message.messageId || message.messageId && !ws.messageIdSent[message.messageId]) {
          ws.send(JSON.stringify(message));
          ws.messageIdSent[message.messageId] = true;
        }
      };

      ws.sendQueue = function () {
        _this.messageQueue.forEach(function (message) {
          return ws.sendMessage(message);
        });

        _this.messageQueue = [];
      };

      ws.reconcile = function () {
        if (new Date().getTime() - ws.lastMessageTimestamp.getTime() > 4 * _this.heartBeatInterval * 1000) {
          ws.close();
        } else {
          Object.keys(_this.messageIdToSubscription).forEach(function (messageId) {
            // @ts-ignore
            ws.sendMessage(_this.messageIdToSubscription[messageId].message);
          });
        }
      };

      ws.lastMessageTimestamp = new Date();
      ws.initPromise = new Promise(function (resolve) {
        ws.onopen = function () {
          ws.sendMessage({
            authorization: _this.authorization
          });
        };

        ws.onmessage = function (event) {
          ws.lastMessageTimestamp = new Date();
          var message = JSON.parse(event.data);

          if (message.handshake) {
            ws.reconcile();
            ws.reconcileTimer = setInterval(function () {
              ws.messageIdSent = {};
              ws.reconcile();
            }, _this.heartBeatInterval * 1000);
            resolve();
          }

          if (_this.messageIdToSubscription[message.messageId]) {
            _this.messageIdToSubscription[message.messageId].callback(new WebSocketTransportResult(message));
          }

          ws.sendQueue();
        };

        ws.onclose = function () {
          if (ws && ws.readyState !== WebSocket__default['default'].CLOSED && ws.readyState !== WebSocket__default['default'].CLOSING) {
            ws.close();
          }

          if (ws.reconcileTimer) {
            clearInterval(ws.reconcileTimer);
            ws.reconcileTimer = null;
          }

          if (_this.ws === ws) {
            _this.ws = null;

            if (Object.keys(_this.messageIdToSubscription).length) {
              _this.initSocket();
            }
          }
        };

        ws.onerror = ws.onclose;
      });
      this.ws = ws;
      return this.ws.initPromise;
    }
  }, {
    key: "sendMessage",
    value: function sendMessage(message) {
      var _this2 = this;

      if (message.unsubscribe && this.messageQueue.find(function (m) {
        return m.messageId === message.unsubscribe;
      })) {
        this.messageQueue = this.messageQueue.filter(function (m) {
          return m.messageId !== message.unsubscribe;
        });
      } else {
        this.messageQueue.push(message);
      }

      setTimeout( /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _this2.initSocket();

              case 2:
                _this2.ws.sendQueue();

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      })), 100);
    }
  }, {
    key: "request",
    value: function request(method, _ref4) {
      var baseRequestId = _ref4.baseRequestId,
          params = _objectWithoutProperties__default['default'](_ref4, ["baseRequestId"]);

      var message = {
        messageId: this.messageCounter++,
        requestId: baseRequestId,
        method: method,
        params: params
      };
      var pendingResults = [];
      var nextMessage = null;

      var runNextMessage = function runNextMessage() {
        if (nextMessage) {
          nextMessage(pendingResults.pop());
          nextMessage = null;
        }
      };

      this.messageIdToSubscription[message.messageId] = {
        message: message,
        callback: function callback(result) {
          pendingResults.push(result);
          runNextMessage();
        }
      };
      var transport = this;
      return {
        subscribe: function subscribe(callback) {
          var _this3 = this;

          return _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
            var result;
            return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    transport.sendMessage(message);
                    _context4.next = 3;
                    return new Promise(function (resolve) {
                      nextMessage = resolve;

                      if (pendingResults.length) {
                        runNextMessage();
                      }
                    });

                  case 3:
                    result = _context4.sent;
                    return _context4.abrupt("return", callback(result, function () {
                      return _this3.subscribe(callback);
                    }));

                  case 5:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }))();
        },
        unsubscribe: function unsubscribe() {
          return _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5() {
            return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    transport.sendMessage({
                      unsubscribe: message.messageId
                    });
                    delete transport.messageIdToSubscription[message.messageId];

                  case 2:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }))();
        }
      };
    }
  }]);

  return WebSocketTransport;
}();

module.exports = WebSocketTransport;
//# sourceMappingURL=cubejs-client-ws-transport.js.map
