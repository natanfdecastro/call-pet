import type { ITransport, ITransportResponse } from '@cubejs-client/core';
/**
 * @title @cubejs-client/ws-transport
 * @permalink /@cubejs-client-ws-transport
 * @menuCategory Cube.js Frontend
 * @subcategory Reference
 * @menuOrder 4
 * @description WebSocket transport for Cube.js client
 */
declare class WebSocketTransportResult {
    protected readonly status: unknown;
    protected readonly result: unknown;
    constructor({ status, message }: {
        status: unknown;
        message: unknown;
    });
    json(): Promise<unknown>;
}
declare type WebSocketTransportOptions = {
    authorization?: string;
    apiUrl: string;
    hearBeatInterval?: number;
    heartBeatInterval?: number;
};
declare type Message = {
    messageId: number;
    requestId: any;
    method: string;
    params: Record<string, unknown>;
};
declare type Subscription = {
    message: Message;
    callback: (result: WebSocketTransportResult) => void;
};
declare class WebSocketTransport implements ITransport<WebSocketTransportResult> {
    protected readonly apiUrl: string;
    protected readonly heartBeatInterval: number;
    protected token: string | undefined;
    protected ws: any;
    protected messageCounter: number;
    protected messageIdToSubscription: Record<number, Subscription>;
    protected messageQueue: Message[];
    constructor({ authorization, apiUrl, heartBeatInterval, hearBeatInterval }: WebSocketTransportOptions);
    set authorization(token: string | undefined);
    close(): Promise<void>;
    get authorization(): string | undefined;
    protected initSocket(): any;
    protected sendMessage(message: any): void;
    request(method: string, { baseRequestId, ...params }: Record<string, unknown>): ITransportResponse<WebSocketTransportResult>;
}
export default WebSocketTransport;
//# sourceMappingURL=index.d.ts.map