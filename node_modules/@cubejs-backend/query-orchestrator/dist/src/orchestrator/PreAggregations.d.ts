import { DriverFactoryByDataSource } from './DriverFactory';
import { QueryQueue } from './QueryQueue';
declare type PreAggregationsOptions = {
    preAggregationsSchemaCacheExpire?: number;
    loadCacheQueueOptions?: any;
    queueOptions?: object | ((dataSource: String) => object);
    redisPool?: any;
    continueWaitTimeout?: number;
    cacheAndQueueDriver?: 'redis' | 'memory';
};
export declare class PreAggregations {
    options: PreAggregationsOptions;
    private redisPrefix;
    private driverFactory;
    private logger;
    private queryCache;
    private cacheDriver;
    externalDriverFactory: any;
    structureVersionPersistTime: any;
    private usedTablePersistTime;
    private externalRefresh;
    private loadCacheQueue;
    private queue;
    constructor(redisPrefix: any, clientFactory: DriverFactoryByDataSource, logger: any, queryCache: any, options: any);
    protected tablesUsedRedisKey(tableName: any): string;
    addTableUsed(tableName: any): Promise<void>;
    tablesUsed(): Promise<any[]>;
    loadAllPreAggregationsIfNeeded(queryBody: any): any;
    getQueue(dataSource?: string): QueryQueue;
    getLoadCacheQueue(dataSource?: string): QueryQueue;
    static preAggregationQueryCacheKey(preAggregation: any): any;
    static targetTableName(versionEntry: any): string;
}
export {};
//# sourceMappingURL=PreAggregations.d.ts.map