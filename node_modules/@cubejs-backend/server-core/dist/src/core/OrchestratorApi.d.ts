import { QueryOrchestrator } from '@cubejs-backend/query-orchestrator';
export declare class OrchestratorApi {
    protected driverFactory: any;
    protected logger: any;
    protected options: any;
    private seenDataSources;
    protected readonly orchestrator: QueryOrchestrator;
    protected readonly externalDriverFactory: any;
    protected readonly continueWaitTimeout: number;
    constructor(driverFactory: any, logger: any, options?: any);
    executeQuery(query: any): Promise<any[] | {
        usedPreAggregations: {
            [index: string]: unknown;
        };
    } | {
        slowQuery: boolean;
        data: any;
        lastRefreshTime: Date;
    }>;
    testConnection(): Promise<void[]>;
    testOrchestratorConnections(): Promise<void>;
    testDriverConnection(driverFn: any, dataSource?: string): Promise<void>;
    release(): Promise<void[]>;
    protected releaseDriver(driverFn: any, dataSource?: string): Promise<void>;
    addDataSeenSource(dataSource: any): void;
}
//# sourceMappingURL=OrchestratorApi.d.ts.map