import { CubejsServerCore } from './server';
import { CompilerApi } from './CompilerApi';
import { RequestContext } from './types';
export declare class RefreshScheduler {
    protected readonly serverCore: CubejsServerCore;
    constructor(serverCore: CubejsServerCore);
    protected refreshQueriesForPreAggregation(context: any, compilerApi: CompilerApi, preAggregation: any, queryingOptions: any): Promise<any>;
    runScheduledRefresh(ctx: RequestContext | null, queryingOptions: any): Promise<{
        finished: boolean;
    }>;
    protected refreshCubesRefreshKey(context: RequestContext, compilerApi: CompilerApi, queryingOptions: any): Promise<void>;
    protected roundRobinRefreshPreAggregationsQueryIterator(context: any, compilerApi: CompilerApi, queryingOptions: any): Promise<{
        partitionCounter: () => number;
        advance: () => Promise<boolean>;
        current: () => Promise<any>;
    }>;
    protected refreshPreAggregations(context: RequestContext, compilerApi: CompilerApi, queryingOptions: any): Promise<void[]>;
}
//# sourceMappingURL=RefreshScheduler.d.ts.map