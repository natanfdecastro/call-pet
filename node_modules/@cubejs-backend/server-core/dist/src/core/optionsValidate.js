"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("@hapi/joi"));
const DriverDependencies_1 = __importDefault(require("./DriverDependencies"));
const schemaQueueOptions = joi_1.default.object().keys({
    concurrency: joi_1.default.number().min(1).integer(),
    continueWaitTimeout: joi_1.default.number().min(0).integer(),
    executionTimeout: joi_1.default.number().min(0).integer(),
    orphanedTimeout: joi_1.default.number().min(0).integer(),
    heartBeatInterval: joi_1.default.number().min(0).integer(),
    sendProcessMessageFn: joi_1.default.func(),
    sendCancelMessageFn: joi_1.default.func(),
});
const jwtOptions = joi_1.default.object().keys({
    jwkRetry: joi_1.default.number().min(1).max(5).integer(),
    jwkUrl: joi_1.default.alternatives().try(joi_1.default.string(), joi_1.default.func()),
    algorithms: joi_1.default.array().items(joi_1.default.string()),
    issuer: joi_1.default.array().items(joi_1.default.string()),
    audience: joi_1.default.string(),
    subject: joi_1.default.string(),
});
const dbTypes = joi_1.default.alternatives().try(joi_1.default.string().valid(...Object.keys(DriverDependencies_1.default)), joi_1.default.func());
const schemaOptions = joi_1.default.object().keys({
    dbType: dbTypes,
    externalDbType: dbTypes,
    schemaPath: joi_1.default.string(),
    basePath: joi_1.default.string(),
    webSocketsBasePath: joi_1.default.string(),
    devServer: joi_1.default.boolean(),
    apiSecret: joi_1.default.string(),
    webSockets: joi_1.default.boolean(),
    processSubscriptionsInterval: joi_1.default.number(),
    initApp: joi_1.default.func(),
    logger: joi_1.default.func(),
    driverFactory: joi_1.default.func(),
    externalDriverFactory: joi_1.default.func(),
    contextToAppId: joi_1.default.func(),
    contextToDataSourceId: joi_1.default.func(),
    contextToOrchestratorId: joi_1.default.func(),
    repositoryFactory: joi_1.default.func(),
    checkAuth: joi_1.default.func(),
    checkAuthMiddleware: joi_1.default.func(),
    jwt: jwtOptions,
    queryTransformer: joi_1.default.func(),
    preAggregationsSchema: joi_1.default.alternatives().try(joi_1.default.string(), joi_1.default.func()),
    schemaVersion: joi_1.default.func(),
    extendContext: joi_1.default.func(),
    scheduledRefreshTimer: joi_1.default.alternatives().try(joi_1.default.boolean(), joi_1.default.number().min(0).integer()),
    compilerCacheSize: joi_1.default.number().min(0).integer(),
    maxCompilerCacheKeepAlive: joi_1.default.number().min(0).integer(),
    scheduledRefreshConcurrency: joi_1.default.number().min(1).integer(),
    updateCompilerCacheKeepAlive: joi_1.default.boolean(),
    telemetry: joi_1.default.boolean(),
    allowUngroupedWithoutPrimaryKey: joi_1.default.boolean(),
    orchestratorOptions: joi_1.default.alternatives().try(joi_1.default.func(), joi_1.default.object().keys({
        redisPrefix: joi_1.default.string().allow(''),
        continueWaitTimeout: joi_1.default.number().min(0).integer(),
        queryCacheOptions: joi_1.default.object().keys({
            refreshKeyRenewalThreshold: joi_1.default.number().min(0).integer(),
            backgroundRenew: joi_1.default.boolean(),
            queueOptions: schemaQueueOptions,
            externalQueueOptions: schemaQueueOptions
        }),
        preAggregationsOptions: {
            queueOptions: schemaQueueOptions,
            externalRefresh: joi_1.default.boolean(),
        },
        rollupOnlyMode: joi_1.default.boolean()
    })),
    allowJsDuplicatePropsInSchema: joi_1.default.boolean(),
    scheduledRefreshContexts: joi_1.default.func(),
    sqlCache: joi_1.default.boolean(),
});
exports.default = (options) => {
    const { error } = joi_1.default.validate(options, schemaOptions, {
        abortEarly: false,
        // http configuration from server is not a part of server-core, we dont needed to get an error
        allowUnknown: true,
    });
    if (error) {
        throw new Error(`Invalid cube-server-core options: ${error.message || error.toString()}`);
    }
};
//# sourceMappingURL=optionsValidate.js.map