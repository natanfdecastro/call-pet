"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyFetch = exports.executeCommand = exports.fileContentsRecursive = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const cross_spawn_1 = __importDefault(require("cross-spawn"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const http_proxy_agent_1 = __importDefault(require("http-proxy-agent"));
const child_process_1 = require("child_process");
async function fileContentsRecursive(dir, rootPath, includeNodeModules = false) {
    if (!rootPath) {
        rootPath = dir;
    }
    if (!fs_extra_1.default.pathExistsSync(dir)) {
        return [];
    }
    if ((dir.includes('node_modules') && !includeNodeModules) || dir.includes('.git')) {
        return [];
    }
    const files = fs_extra_1.default.readdirSync(dir);
    return (await Promise.all(files.map(async (file) => {
        const fileName = path_1.default.join(dir, file);
        const stats = await fs_extra_1.default.lstat(fileName);
        if (!stats.isDirectory()) {
            const content = fs_extra_1.default.readFileSync(fileName, 'utf-8');
            return [
                {
                    fileName: fileName.replace(rootPath, '').replace(/\\/g, '/'),
                    content,
                },
            ];
        }
        else {
            return fileContentsRecursive(fileName, rootPath, includeNodeModules);
        }
    }))).reduce((a, b) => a.concat(b), []);
}
exports.fileContentsRecursive = fileContentsRecursive;
async function executeCommand(command, args, options = {}) {
    const child = cross_spawn_1.default(command, args, { stdio: 'inherit', ...options });
    return new Promise((resolve, reject) => {
        child.on('close', (code) => {
            if (code !== 0) {
                reject(new Error(`${command} ${args.join(' ')} failed with exit code ${code}. Please check your console.`));
                return;
            }
            resolve();
        });
    });
}
exports.executeCommand = executeCommand;
function getCommandOutput(command) {
    return new Promise((resolve, reject) => {
        child_process_1.exec(command, (error, stdout) => {
            if (error) {
                reject(error.message);
                return;
            }
            resolve(stdout);
        });
    });
}
async function proxyFetch(url) {
    const [proxy] = (await Promise.all([getCommandOutput('npm config get https-proxy'), getCommandOutput('npm config get proxy')]))
        .map((s) => s.trim())
        .filter((s) => !['null', 'undefined', ''].includes(s));
    return node_fetch_1.default(url, proxy
        ? {
            // @ts-ignore
            agent: new http_proxy_agent_1.default(proxy),
        }
        : {});
}
exports.proxyFetch = proxyFetch;
//# sourceMappingURL=utils.js.map